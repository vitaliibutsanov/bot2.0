import ccxt
import os
import time
import logging
import asyncio
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext, ContextTypes
from dotenv import load_dotenv
import ta
from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands
from ta.trend import EMAIndicator
from ta.volatility import AverageTrueRange

# ===== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =====
logging.basicConfig(
    filename='trades.log',
    format='%(asctime)s | %(levelname)s | %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)

COMMANDS = []

def register_command(app, command, handler, description=""):
    app.add_handler(CommandHandler(command, handler))
    COMMANDS.append((command, description))

# ===== –ö–û–ù–§–ò–ì =====
class TradingConfig:
    RISK_PER_TRADE = 0.02
    MAX_TRADES_PER_DAY = 5
    STOP_LOSS = 0.05
    TAKE_PROFIT = 0.10
    TRADING_ENABLED = False
    AUTO_TRADING = False
    LOSE_STREAK = 0
    PAUSE_UNTIL = None

config = TradingConfig()

# ===== –ó–ê–ì–†–£–ó–ö–ê API –ö–õ–Æ–ß–ï–ô =====
load_dotenv()
binance = ccxt.binanceusdm({
    'apiKey': os.getenv('BINANCE_API_KEY'),
    'secret': os.getenv('BINANCE_API_SECRET'),
    'options': {'adjustForTimeDifference': True}
})

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = int(os.getenv('TELEGRAM_CHAT_ID'))

# ===== –ë–ê–õ–ê–ù–° =====
def get_binance_balance():
    try:
        balance = binance.fetch_balance()
        return {
            'USDT': balance['total']['USDT'],
            'BTC': balance['total']['BTC'],
            'ETH': balance['total']['ETH']
        }
    except Exception as e:
        logging.error(f"BALANCE_ERROR: {e}")
        return {'USDT': 0, 'BTC': 0, 'ETH': 0}

# ===== –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ =====
def get_technical_indicators(symbol='BTC/USDT', timeframe='1h', limit=100):
    try:
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

        indicators = {
            'price': df['close'].iloc[-1],
            'rsi': RSIIndicator(df['close'], window=14).rsi().iloc[-1],
            'volume': df['volume'].iloc[-1]
        }

        bb = BollingerBands(df['close'], window=20)
        indicators['bb_upper'] = bb.bollinger_hband().iloc[-1]
        indicators['bb_lower'] = bb.bollinger_lband().iloc[-1]
        indicators['ema'] = EMAIndicator(df['close'], window=20).ema_indicator().iloc[-1]
        indicators['atr'] = AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range().iloc[-1]

        return indicators
    except Exception as e:
        logging.error(f"TECH_INDICATOR_ERROR | {symbol} | {str(e)}")
        return None

# ===== –ì–†–ê–§–ò–ö =====
def plot_indicators(symbol='BTC/USDT', timeframe='1h', limit=100):
    try:
        data = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(data, columns=['time', 'open', 'high', 'low', 'close', 'volume'])

        plt.figure(figsize=(12, 6))
        plt.plot(df['close'], label='Price', color='blue')

        bb = BollingerBands(df['close'], window=20)
        plt.plot(bb.bollinger_hband(), label='Upper Band', linestyle='--', color='red')
        plt.plot(bb.bollinger_lband(), label='Lower Band', linestyle='--', color='green')

        plt.title(f"Symbol: {symbol} Price change")
        plt.legend()
        plt.grid(True)
        plt.savefig('chart.png', bbox_inches='tight', dpi=100)
        plt.close()
        return open('chart.png', 'rb')
    except Exception as e:
        logging.error(f"CHART_ERROR | {symbol} | {str(e)}")
        return None

# ===== –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê =====
def analyze_market_smart(symbol='BTC/USDT', timeframe='1h', limit=100):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: RSI, Bollinger, EMA, ATR, —Å—Ç–∞–∫–∞–Ω."""
    indicators = get_technical_indicators(symbol, timeframe, limit)
    if not indicators:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."

    price = indicators['price']
    rsi = indicators['rsi']
    bb_upper = indicators['bb_upper']
    bb_lower = indicators['bb_lower']
    ema = indicators['ema']
    atr = indicators['atr']
    volume = indicators['volume']

    # –ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã
    price_position = "üîπ –¶–µ–Ω–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏"
    if price <= bb_lower:
        price_position = "üü¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"
    elif price >= bb_upper:
        price_position = "üî¥ –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞
    try:
        orderbook = binance.fetch_order_book(symbol, limit=10)
        bids = orderbook['bids']
        asks = orderbook['asks']
        bid_volume = sum([b[1] for b in bids[:3]])
        ask_volume = sum([a[1] for a in asks[:3]])
    except Exception as e:
        logging.error(f"ORDERBOOK_ERROR | {symbol} | {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞."

    imbalance = (bid_volume - ask_volume) / max(bid_volume + ask_volume, 1)

    # –û—Ü–µ–Ω–∫–∞ –¥–æ–≤–µ—Ä–∏—è
    confidence = 0
    if rsi < 35: confidence += 1
    if price <= bb_lower: confidence += 1
    if imbalance > 0.2: confidence += 1
    if volume > 0: confidence += 1
    if price > ema: confidence += 1
    if atr > 0: confidence += 1

    signal = "‚ùï –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞"
    if confidence >= 4 and rsi < 35:
        signal = "üìà –°–ò–ì–ù–ê–õ: –ü–û–ö–£–ü–ê–¢–¨"
    elif confidence >= 4 and rsi > 65:
        signal = "üìâ –°–ò–ì–ù–ê–õ: –ü–†–û–î–ê–í–ê–¢–¨"

    log_msg = (
        f"ANALYZE_SMART | {symbol} | Price={price:.2f} | RSI={rsi:.2f} | "
        f"BB=({bb_lower:.2f}/{bb_upper:.2f}) | EMA={ema:.2f} | ATR={atr:.2f} | "
        f"Bid={bid_volume:.2f} Ask={ask_volume:.2f} | Imb={imbalance:.2f} | Conf={confidence} | {signal}"
    )
    logging.info(log_msg)

    return (
        f"{signal}\n{price_position}\n"
        f"üìâ RSI: {rsi:.2f}\n"
        f"üìè EMA: {ema:.2f}\n"
        f"‚ö° ATR: {atr:.2f}\n"
        f"üìä –û–±—ä—ë–º: {volume:.2f}\n"
        f"üåü –î–æ–≤–µ—Ä–∏–µ: {confidence}/6"
    )

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–¨–Æ–ß–ï–†–°–ê–ú–ò =====
class FuturesManager:
    def __init__(self):
        self.active_positions = {}
        self.loss_streak = 0
        self.max_loss_streak = 3
        self.cooldown_until = None

    def is_paused(self):
        return self.cooldown_until and datetime.now() < self.cooldown_until

    async def open_position(self, symbol, side, amount, leverage=5, stop_loss=None, take_profit=None):
        if self.is_paused():
            return False, f"–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –ø–∞—É–∑–µ –¥–æ {self.cooldown_until.strftime('%H:%M:%S')}."
        try:
            binance.set_leverage(leverage, symbol)
            order = binance.create_order(symbol=symbol, type='MARKET', side=side, amount=amount)
            entry_price = order.get('price', binance.fetch_ticker(symbol)['last'])
            self.active_positions[order['id']] = {
                'symbol': symbol,
                'side': side,
                'amount': amount,
                'entry_price': entry_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'opened_at': datetime.now()
            }
            logging.info(f"FUTURES_OPEN | {symbol} | {side} | {amount} @ {entry_price}")
            return True, order
        except Exception as e:
            logging.error(f"FUTURES_ERROR | {symbol} | {str(e)}")
            return False, str(e)

    async def close_position(self, position_id):
        try:
            pos = self.active_positions.get(position_id)
            if not pos:
                return False, "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            side = 'SELL' if pos['side'] == 'BUY' else 'BUY'
            binance.create_order(symbol=pos['symbol'], type='MARKET', side=side, amount=pos['amount'])
            logging.info(f"FUTURES_CLOSE | {pos['symbol']} | {pos['side']} | {pos['amount']}")
            del self.active_positions[position_id]
            return True, "–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞."
        except Exception as e:
            return False, str(e)

    async def check_positions(self):
        closed_positions = []
        for pid, pos in list(self.active_positions.items()):
            try:
                ticker = binance.fetch_ticker(pos['symbol'])
                price = ticker['last']
                side = pos['side']

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP
                if pos['take_profit'] and ((side == 'BUY' and price >= pos['take_profit']) or (side == 'SELL' and price <= pos['take_profit'])):
                    await self.close_position(pid)
                    closed_positions.append(f"TP —Å—Ä–∞–±–æ—Ç–∞–ª: {pos['symbol']} @ {price:.2f}")
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SL
                if pos['stop_loss'] and ((side == 'BUY' and price <= pos['stop_loss']) or (side == 'SELL' and price >= pos['stop_loss'])):
                    await self.close_position(pid)
                    self.loss_streak += 1
                    if self.loss_streak >= self.max_loss_streak:
                        self.cooldown_until = datetime.now() + timedelta(hours=6)
                        logging.warning("PAUSE | 3 —É–±—ã—Ç–∫–∞ –ø–æ–¥—Ä—è–¥. –ü–∞—É–∑–∞ 6 —á–∞—Å–æ–≤.")
                    closed_positions.append(f"SL —Å—Ä–∞–±–æ—Ç–∞–ª: {pos['symbol']} @ {price:.2f}")
                    continue
            except Exception as e:
                logging.error(f"CHECK_POSITION_ERROR | {pid} | {str(e)}")
        return closed_positions

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–û–¢–û–ú =====
class PositionManager:
    def __init__(self):
        self.active_positions = {}

    async def open_position(self, symbol, amount, stop_loss=None, take_profit=None):
        if not config.TRADING_ENABLED:
            return False, "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        if len(self.active_positions) >= config.MAX_TRADES_PER_DAY:
            return False, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫"
        try:
            balance = binance.fetch_balance()['USDT']['free']
            position_size = min(amount, balance * config.RISK_PER_TRADE)
            order = binance.create_order(symbol=symbol, type='MARKET', side='buy', amount=position_size)
            self.active_positions[order['id']] = {
                'symbol': symbol,
                'amount': position_size,
                'entry_price': order['price'],
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'opened_at': datetime.now()
            }
            logging.info(f"OPEN_POSITION | {symbol} | {position_size}")
            return True, order
        except Exception as e:
            logging.error(f"POSITION_ERROR | {symbol} | {str(e)}")
            return False, str(e)

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======
def positions_summary():
    if not position_manager.active_positions:
        return "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    summary = []
    for pid, pos in position_manager.active_positions.items():
        summary.append(f"{pos['symbol']}: {pos['amount']:.6f} @ {pos['entry_price']:.2f}")
    return "\n".join(summary)

def is_binance_alive():
    try:
        binance.fetch_time()
        return True
    except Exception:
        return False

position_manager = PositionManager()
futures_manager = FuturesManager()

# ====== TELEGRAM –ö–û–ú–ê–ù–î–´ ======
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def check_balance(update: Update, context: CallbackContext):
    try:
        balance = get_binance_balance()
        text = (f"üí∞ –ë–∞–ª–∞–Ω—Å:\n"
                f"USDT: {balance['USDT']:.2f}\n"
                f"BTC: {balance['BTC']:.6f}\n"
                f"ETH: {balance['ETH']:.6f}")
        await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def price(update: Update, context: CallbackContext):
    try:
        coin = context.args[0].upper() if context.args else 'BTC'
        ticker = binance.fetch_ticker(f"{coin}/USDT")
        await update.message.reply_text(f"üìä {coin}: {ticker['last']:.2f} USDT")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def analyze(update: Update, context: CallbackContext):
    try:
        symbol = context.args[0].upper() + "/USDT" if context.args else "BTC/USDT"
        result = analyze_market_smart(symbol)
        await update.message.reply_text(result)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def trading_status(update: Update, context: CallbackContext):
    status = "üü¢ –ê–ö–¢–ò–í–ï–ù" if config.TRADING_ENABLED else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
    await update.message.reply_text(
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–†–∏—Å–∫: {config.RISK_PER_TRADE * 100:.1f}%\n"
        f"–°–¥–µ–ª–∫–∏: {len(position_manager.active_positions)}/{config.MAX_TRADES_PER_DAY}"
    )

async def trading_status_full(update: Update, context: CallbackContext):
    balance = get_binance_balance()
    api_status = "üü¢ Binance API" if is_binance_alive() else "üî¥ –ù–µ—Ç —Å–≤—è–∑–∏"
    msg = (
        f"{api_status}\n"
        f"–†–∏—Å–∫: {config.RISK_PER_TRADE*100:.1f}%\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance['USDT']:.2f} USDT\n"
        f"–ü–æ–∑–∏—Ü–∏–∏:\n{positions_summary()}"
    )
    await update.message.reply_text(msg)

async def set_risk(update: Update, context: CallbackContext):
    try:
        value = float(context.args[0]) / 100
        if 0.001 <= value <= 0.1:
            config.RISK_PER_TRADE = value
            await update.message.reply_text(f"–†–∏—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value*100:.1f}%")
        else:
            await update.message.reply_text("‚ùå –†–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.1% - 10%")
    except Exception:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /risk 2.5 (–¥–ª—è 2.5%)")

async def pause_trading(update: Update, context: CallbackContext):
    config.TRADING_ENABLED = False
    await update.message.reply_text("‚è∏ –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def resume_trading(update: Update, context: CallbackContext):
    config.TRADING_ENABLED = True
    await update.message.reply_text("üü¢ –¢–æ—Ä–≥–æ–≤–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

async def toggle_auto(update: Update, context: CallbackContext):
    config.AUTO_TRADING = not config.AUTO_TRADING
    state = "üü¢ –ê–≤—Ç–æ-—Ä–µ–∂–∏–º –í–ö–õ" if config.AUTO_TRADING else "üî¥ –ê–≤—Ç–æ-—Ä–µ–∂–∏–º –í–´–ö–õ"
    await update.message.reply_text(state)

async def show_help(update: Update, context: CallbackContext):
    cmds = [
        "/start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
        "/balance ‚Äî –ë–∞–ª–∞–Ω—Å",
        "/price <COIN> ‚Äî –ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã",
        "/analyze ‚Äî –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞",
        "/status ‚Äî –ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å",
        "/trading_status ‚Äî –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å",
        "/risk <X> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∏—Å–∫ (%)",
        "/pause ‚Äî –ü–∞—É–∑–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏",
        "/resume ‚Äî –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å",
        "/auto ‚Äî –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –í–∫–ª/–í—ã–∫–ª",
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"
    ]
    await update.message.reply_text("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(cmds))

# ====== –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò ======
async def signal_checker():
    while True:
        try:
            if config.TRADING_ENABLED and config.AUTO_TRADING:
                signal = analyze_market_smart()
                if "–°–ò–ì–ù–ê–õ:" in signal:
                    await app.bot.send_message(chat_id=CHAT_ID, text=f"üì° –°–∏–≥–Ω–∞–ª:\n{signal}")
        except Exception as e:
            logging.error(f"signal_checker: {e}")
        await asyncio.sleep(60)

async def positions_watcher():
    while True:
        try:
            closed = await futures_manager.check_positions()
            for msg in closed:
                await app.bot.send_message(chat_id=CHAT_ID, text=f"üîî {msg}")
        except Exception as e:
            logging.error(f"positions_watcher: {e}")
        await asyncio.sleep(60)

# ====== MAIN ======
def main():
    global app
    print(">>> MAIN START")
    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("balance", check_balance))
        app.add_handler(CommandHandler("price", price))
        app.add_handler(CommandHandler("analyze", analyze))
        app.add_handler(CommandHandler("status", trading_status))
        app.add_handler(CommandHandler("trading_status", trading_status_full))
        app.add_handler(CommandHandler("risk", set_risk))
        app.add_handler(CommandHandler("pause", pause_trading))
        app.add_handler(CommandHandler("resume", resume_trading))
        app.add_handler(CommandHandler("auto", toggle_auto))
        app.add_handler(CommandHandler("help", show_help))

        app.job_queue.run_repeating(lambda _: asyncio.create_task(signal_checker()), interval=60)
        app.job_queue.run_repeating(lambda _: asyncio.create_task(positions_watcher()), interval=60)

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()
    except Exception as e:
        logging.error(f"MAIN_ERROR: {e}", exc_info=True)
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
