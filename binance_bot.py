import os
import ccxt
import asyncio
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance
binance = ccxt.binance({
    'apiKey': os.getenv('BINANCE_API_KEY'),
    'secret': os.getenv('BINANCE_API_SECRET'),
    'options': {'adjustForTimeDifference': True}
})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = int(os.getenv('TELEGRAM_CHAT_ID'))

async def send_telegram(msg):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    bot = Bot(token=TELEGRAM_TOKEN)
    await bot.send_message(chat_id=CHAT_ID, text=msg)

async def check_balance(update: Update = None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ Binance"""
    try:
        balance = binance.fetch_balance()['USDT']['free']
        msg = f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT"
        if update:
            await update.message.reply_text(msg)
        await send_telegram(msg)
    except Exception as e:
        error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"
        if update:
            await update.message.reply_text(error_msg)
        await send_telegram(error_msg)

async def start(update: Update, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è Binance –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/price BTC - –ö—É—Ä—Å BTC"
    )

async def price(update: Update, context):
    """–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏"""
    coin = context.args[0].upper() if context.args else 'BTC'
    ticker = binance.fetch_ticker(f"{coin}/USDT")
    await update.message.reply_text(
        f"üìä {coin}: {ticker['last']:.2f} USDT\n"
        f"24h: {ticker['percentage']:.2f}%"
    )

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", check_balance))
    app.add_handler(CommandHandler("price", price))
    app.run_polling()

if __name__ == "__main__":
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–∞–ø—É—Å–∫
    asyncio.run(run_bot())