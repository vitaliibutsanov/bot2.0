import ccxt  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ctxt –Ω–∞ ccxt
import os
import time
import logging
import asyncio
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
from ta import momentum
import ta
from ta.trend import EMAIndicator
from ta.volatility import AverageTrueRange

from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext, ContextTypes
from dotenv import load_dotenv
from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
logging.basicConfig(
    filename='trades.log',
    format='%(asctime)s | %(levelname)s | %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)

class TradingConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    RISK_PER_TRADE = 0.02  # 2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
    MAX_TRADES_PER_DAY = 5
    STOP_LOSS = 0.05  # 5%
    TAKE_PROFIT = 0.10  # 10%
    TRADING_ENABLED = False  # –§–ª–∞–≥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    AUTO_TRADING = False  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Å–∏–≥–Ω–∞–ª—É

config = TradingConfig()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance
binance = ccxt.binance({
    'apiKey': os.getenv('BINANCE_API_KEY'),
    'secret': os.getenv('BINANCE_API_SECRET'),
    'options': {'adjustForTimeDifference': True}
})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = int(os.getenv('TELEGRAM_CHAT_ID'))

def get_binance_balance():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å Binance"""
    balance = binance.fetch_balance()
    return {
        'USDT': balance['total']['USDT'],
        'BTC': balance['total']['BTC'],
        'ETH': balance['total']['ETH']
    }

def get_technical_indicators(symbol='BTC/USDT', timeframe='1h', limit=100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (RSI, Bollinger Bands)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi = RSIIndicator(df['close'], window=14).rsi().iloc[-1]
        bb = BollingerBands(df['close'], window=20)

        return {
            'rsi': round(rsi, 2),
            'bb_upper': round(bb.bollinger_hband().iloc[-1], 2),
            'bb_lower': round(bb.bollinger_lband().iloc[-1], 2),
            'price': df['close'].iloc[-1],
            'volume': df['volume'].iloc[-1]
        }

    except Exception as e:
        logging.error(f"TECH_INDICATOR_ERROR | {symbol} | {str(e)}")
        return None

def analyze_market(symbol='BTC/USDT', timeframe='1h', limit=100):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: RSI + —Å—Ç–∞–∫–∞–Ω + –æ–±—ä—ë–º—ã + BollingerBands"""
    indicators = get_technical_indicators(symbol, timeframe, limit)
    if not indicators:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."

    price = indicators['price']
    rsi = indicators['rsi']
    bb_upper = indicators['bb_upper']
    bb_lower = indicators['bb_lower']
    volume = indicators['volume']

    try:
        orderbook = binance.fetch_order_book(symbol, limit=10)
        bids = orderbook['bids']
        asks = orderbook['asks']
        bid_volume = sum([b[1] for b in bids[:3]])  # –±–ª–∏–∂–Ω–∏–µ 3 —É—Ä–æ–≤–Ω—è
        ask_volume = sum([a[1] for a in asks[:3]])
        total_bid = sum([b[1] for b in bids])
        total_ask = sum([a[1] for a in asks])
    except Exception as e:
        logging.error(f"ORDERBOOK_ERROR | {symbol} | {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞."

    imbalance = (bid_volume - ask_volume) / max(bid_volume + ask_volume, 1)
    position = "üîπ –¶–µ–Ω–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏"
    if price <= bb_lower:
        position = "üü¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"
    elif price >= bb_upper:
        position = "üî¥ –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"

    signal = "ü§î –°–∏–≥–Ω–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"

    if rsi < 35 and imbalance > 0.2 and price <= bb_lower and volume > 0:
        signal = "üìà –°–ò–ì–ù–ê–õ: –ü–û–ö–£–ü–ê–¢–¨ (RSI < 35, —Å–ø—Ä–æ—Å, BB –Ω–∏–∂–Ω—è—è)"
    elif rsi > 65 and imbalance < -0.2 and price >= bb_upper and volume > 0:
        signal = "üìâ –°–ò–ì–ù–ê–õ: –ü–†–û–î–ê–í–ê–¢–¨ (RSI > 65, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, BB –≤–µ—Ä—Ö–Ω—è—è)"
    else:
        signal = "‚è∏ –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞ ‚Äî –∂–¥—É —Å–∏–≥–Ω–∞–ª–∞"

    log_msg = (
        f"ANALYZE | {symbol} | Price={price:.2f} | RSI={rsi} | "
        f"BB=({bb_lower:.2f}/{bb_upper:.2f}) | Pos={position} | "
        f"Bid={bid_volume:.2f} Ask={ask_volume:.2f} | Imb={imbalance:.2f} | {signal}"
    )
    logging.info(log_msg)

    return f"{signal}\n{position}\nRSI: {rsi:.2f}\n–û–±—ä—ë–º: {volume:.2f}"

def plot_indicators(symbol='BTC/USDT', timeframe='1h', limit=100):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    try:
        data = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(data, columns=['time', 'open', 'high', 'low', 'close', 'volume'])

        plt.figure(figsize=(12, 6))
        plt.plot(df['close'], label='Price', color='blue')

        # –î–æ–±–∞–≤–ª—è–µ–º Bollinger Bands
        bb = BollingerBands(df['close'], window=20)
        plt.plot(bb.bollinger_hband(), label='Upper Band', linestyle='--', color='red')
        plt.plot(bb.bollinger_lband(), label='Lower Band', linestyle='--', color='green')

        plt.title(f"Symbol: {symbol} Price change")
        plt.legend()
        plt.grid(True)
        plt.savefig('chart.png', bbox_inches='tight', dpi=100)
        plt.close()

        return open('chart.png', 'rb')

    except Exception as e:
        logging.error(f"CHART_ERROR | {symbol} | {str(e)}")
        return None
    

class PositionManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    def __init__(self):
        self.active_positions = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π

    async def open_position(self, symbol, amount, stop_loss=None, take_profit=None):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if not config.TRADING_ENABLED:
            return False, "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"

        if len(self.active_positions) >= config.MAX_TRADES_PER_DAY:
            return False, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫"

        try:
            balance = binance.fetch_balance()['USDT']['free']
            position_size = min(amount, balance * config.RISK_PER_TRADE)

            order = binance.create_order(
                symbol=symbol,
                type='MARKET',
                side='buy',
                amount=position_size,
                params={'stopLoss': stop_loss} if stop_loss else {}
            )

            self.active_positions[order['id']] = {
                'symbol': symbol,
                'amount': position_size,
                'entry_price': order['price'],
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'opened_at': datetime.now()
            }

            logging.info(f"OPEN_POSITION | {symbol} | {position_size}")
            return True, order

        except Exception as e:
            logging.error(f"POSITION_ERROR | {symbol} | {str(e)}")
            return False, str(e)
               
def is_binance_alive():
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥ Binance ‚Äî True, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å—Ç—å"""
    try:
        binance.fetch_time()
        return True
    except Exception:
        return False

def positions_summary():
    """–ö–æ—Ä–æ—Ç–∫–æ –æ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"""
    if not position_manager.active_positions:
        return "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    summary = []
    for pid, pos in position_manager.active_positions.items():
        sym   = pos['symbol']
        amt   = pos['amount']
        price = pos['entry_price']
        summary.append(f"{sym}: {amt:.6f} @ {price:.2f}")
    return "\n".join(summary)

position_manager = PositionManager()

async def check_balance(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
    try:
        balance = get_binance_balance()
        response = f"""
üí∞ –í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:
USDT: {balance['USDT']:.2f}
BTC: {balance['BTC']:.6f}
ETH: {balance['ETH']:.6f}
        """
        await update.message.reply_text(response)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è Binance –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/price BTC - –ö—É—Ä—Å BTC"
    )

# –ö–æ–º–∞–Ω–¥–∞ /setkey: —Å–º–µ–Ω–∞ API –∫–ª—é—á–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
async def setkey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    allowed_users = [6107092031]  # ‚ùó –£–ö–ê–ñ–ò –°–í–û–ô Telegram ID

    if user_id not in allowed_users:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n/setkey <API_KEY> <API_SECRET>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n/setkey AbC123xYz AbC456qWe\n\n"
            "–û–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ –∫–ª—é—á–µ–π."
        )
        return

    api_key, api_secret = context.args

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –¥–ª–∏–Ω–∞ –∏ —Å–∏–º–≤–æ–ª—ã
    if not (10 <= len(api_key) <= 100) or not (10 <= len(api_secret) <= 100):
        await update.message.reply_text("‚ùó –ü–æ—Ö–æ–∂–µ, –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π.")
        return

    if ' ' in api_key or ' ' in api_secret:
        await update.message.reply_text("‚ùó –ö–ª—é—á–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    env_path = ".env"

    try:
        with open(env_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
    except FileNotFoundError:
        lines = []

    def update_or_append(var, value, lines):
        found = False
        for i in range(len(lines)):
            if lines[i].startswith(f"{var}="):
                lines[i] = f"{var}={value}\n"
                found = True
        if not found:
            lines.append(f"{var}={value}\n")

    update_or_append("BINANCE_API_KEY", api_key, lines)
    update_or_append("BINANCE_API_SECRET", api_secret, lines)

    try:
        with open(env_path, "w", encoding="utf-8") as f:
            f.writelines(lines)
        load_dotenv(override=True)
        await update.message.reply_text("‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}")


async def price(update: Update, context: CallbackContext):
    """–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    try:
        coin = context.args[0].upper() if context.args else 'BTC'
        ticker = binance.fetch_ticker(f"{coin}/USDT")
        await update.message.reply_text(
            f"üìä {coin}: {ticker['last']:.2f} USDT\n"
            f"24h: {ticker['percentage']:.2f}%"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def trading_status(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    status = "üü¢ –ê–ö–¢–ò–í–ï–ù" if config.TRADING_ENABLED else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
    await update.message.reply_text(
        f"–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏: {status}\n"
        f"–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {config.RISK_PER_TRADE * 100}%\n"
        f"–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫: {len(position_manager.active_positions)}/{config.MAX_TRADES_PER_DAY}"
    )

async def set_risk(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    try:
        risk = float(context.args[0]) / 100
        if 0.001 <= risk <= 0.1:  # 0.1% - 10%
            config.RISK_PER_TRADE = risk
            msg = f"üîê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∏—Å–∫: {risk * 100}%"
        else:
            msg = "‚ùå –†–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.1% –∏ 10%"
        logging.info(f"CONFIG | RISK_SET | {risk * 100}%")
    except Exception:
        msg = "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /risk 2.5 (–¥–ª—è 2.5% —Ä–∏—Å–∫–∞)"
    
    await update.message.reply_text(msg)

async def show_log(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /log ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ trades.log"""
    try:
        num_lines = int(context.args[0]) if context.args else 20
        with open("trades.log", "r", encoding="utf-8") as file:
            lines = file.readlines()[-num_lines:]
            if lines:
                output = "üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n" + "".join(lines)
                await update.message.reply_text(f"<pre>{output}</pre>", parse_mode="HTML")
            else:
                await update.message.reply_text("üì≠ –õ–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
    except FileNotFoundError:
        await update.message.reply_text("‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}")

async def trading_status_full(update: Update, context: CallbackContext):
    """–†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    api_status   = "üü¢ –û–Ω–ª–∞–π–Ω" if is_binance_alive() else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
    trade_status = "üü¢ –ê–ö–¢–ò–í–ï–ù" if config.TRADING_ENABLED else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
    open_pos     = positions_summary()
    balance      = get_binance_balance()

    msg = (
        f"üì° Binance API: {api_status}\n"
        f"üìà –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏: {trade_status}\n"
        f"üîí –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {config.RISK_PER_TRADE*100:.2f}%\n"
        f"üéØ –õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫: {len(position_manager.active_positions)}/{config.MAX_TRADES_PER_DAY}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance['USDT']:.2f} USDT\n"
        f"üõí –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n{open_pos}"
    )
    await update.message.reply_text(msg)

async def analyze(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞"""
    try:
        symbol = context.args[0].upper() + "/USDT" if context.args else "BTC/USDT"
        result = analyze_market_smart(symbol)
        await update.message.reply_text(result)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

async def auto_trade_if_signal(symbol='BTC/USDT'):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    if not config.TRADING_ENABLED:
        return

    signal_text = analyze_market(symbol)
    logging.info(f"AUTO_TRADE_CHECK | {symbol} | {signal_text}")

    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if "–ü–û–ö–£–ü–ê–¢–¨" in signal_text:
        try:
            result, detail = await position_manager.open_position(symbol, amount=1.0)
            msg = "‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: –ü–û–ö–£–ü–ö–ê" if result else f"‚ùå –û—à–∏–±–∫–∞: {detail}"
        except Exception as e:
            msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}"
        logging.info(f"AUTO_TRADE_BUY | {msg}")

    elif "–ü–†–û–î–ê–í–ê–¢–¨" in signal_text:
        # –ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ ‚Äî –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        logging.info("AUTO_TRADE_SELL | ‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

    else:
        logging.info("AUTO_TRADE_SKIP | –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≤—Ö–æ–¥–∞.")

async def pause_trading(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /pause ‚Äî –æ—Ç–∫–ª—é—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é"""
    config.TRADING_ENABLED = False
    logging.info("CONFIG | TRADING PAUSED")
    await update.message.reply_text("‚õî –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def resume_trading(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /resume ‚Äî –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é"""
    config.TRADING_ENABLED = True
    logging.info("CONFIG | TRADING RESUMED")
    await update.message.reply_text("üü¢ –¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

def get_technical_indicators(symbol: str, timeframe: str, limit: int):
    try:
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

        indicators = {}

        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        indicators['price'] = df['close'].iloc[-1]
        indicators['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi().iloc[-1]

        bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
        indicators['bb_upper'] = bb.bollinger_hband().iloc[-1]
        indicators['bb_lower'] = bb.bollinger_lband().iloc[-1]

        indicators['volume'] = df['volume'].iloc[-1]

        # üîÑ –ù–æ–≤–æ–µ: EMA –∏ ATR
        indicators['ema'] = ta.trend.EMAIndicator(df['close'], window=20).ema_indicator().iloc[-1]
        indicators['atr'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range().iloc[-1]

        return indicators

    except Exception as e:
        logging.error(f"‚ùå INDICATOR_ERROR | {symbol} | {str(e)}")
        return None

def analyze_market_smart(symbol='BTC/USDT', timeframe='1h', limit=100):
    """üìä –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –¥–æ–≤–µ—Ä–∏–µ–º –∫ —Å–∏–≥–Ω–∞–ª—É –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏."""
    indicators = get_technical_indicators(symbol, timeframe, limit)
    if not indicators:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."

    price = indicators['price']
    rsi = indicators['rsi']
    bb_upper = indicators['bb_upper']
    bb_lower = indicators['bb_lower']
    volume = indicators['volume']

    # –†–∞—Å—á—ë—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ EMA –∏ ATR
    try:
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        ema = ta.trend.EMAIndicator(df['close'], window=20).ema_indicator().iloc[-1]
        atr = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range().iloc[-1]
    except Exception as e:
        logging.error(f"ADV_INDICATOR_ERROR | {symbol} | {str(e)}")
        ema = None
        atr = None

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞–∫–∞–Ω—É
    try:
        orderbook = binance.fetch_order_book(symbol, limit=10)
        bids = orderbook['bids']
        asks = orderbook['asks']
        bid_volume = sum([b[1] for b in bids[:3]])
        ask_volume = sum([a[1] for a in asks[:3]])
        total_bid = sum([b[1] for b in bids])
        total_ask = sum([a[1] for a in asks])
    except Exception as e:
        logging.error(f"ORDERBOOK_ERROR | {symbol} | {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞."

    imbalance = (bid_volume - ask_volume) / max(bid_volume + ask_volume, 1)
    price_position = "üîπ –¶–µ–Ω–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏"
    if price <= bb_lower:
        price_position = "üü¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"
    elif price >= bb_upper:
        price_position = "üî¥ –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"

    # –õ–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–æ–≤–µ—Ä–∏—è –∫ —Å–∏–≥–Ω–∞–ª—É
    signal = "‚ùï –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞"
    confidence = 0

    if rsi < 35:
        confidence += 1
    if price <= bb_lower:
        confidence += 1
    if imbalance > 0.2:
        confidence += 1
    if volume > 0:
        confidence += 1
    if ema and price > ema:
        confidence += 1  # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ EMA ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–≤–µ—Ä–∏–µ
    if atr and atr > 0:
        confidence += 1  # ATR > 0 ‚Äì –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–µ —Ñ–ª—ç—Ç

    if confidence >= 4:
        signal = "üìà –°–ò–ì–ù–ê–õ: –ü–û–ö–£–ü–ê–¢–¨"
    elif rsi > 65 and imbalance < -0.2 and price >= bb_upper:
        signal = "üìâ –°–ò–ì–ù–ê–õ: –ü–†–û–î–ê–í–ê–¢–¨"
        confidence = max(confidence, 4)

    confidence_stars = "‚òÖ" * confidence + "‚òÜ" * (5 - confidence)

    log_msg = (
        f"üß† ANALYZE_SMART | {symbol} | Price={price:.2f} | RSI={rsi:.2f} | "
        f"BB=({bb_lower:.2f}/{bb_upper:.2f}) | EMA={ema:.2f if ema else 'N/A'} | "
        f"ATR={atr:.2f if atr else 'N/A'} | Pos={price_position} | "
        f"Bid={bid_volume:.2f} Ask={ask_volume:.2f} | Imb={imbalance:.2f} | Confidence={confidence} | {signal}"
    )
    logging.info(log_msg)

    return (
        f"{signal}\n"
        f"{price_position}\n"
        f"üìâ RSI: {rsi:.2f}\n"
        f"üìä –û–±—ä—ë–º: {volume:.2f}\n"
        f"üìà EMA: {ema:.2f if ema else 'N/A'}\n"
        f"‚ö° ATR (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å): {atr:.2f if atr else 'N/A'}\n"
        f"üåü –î–æ–≤–µ—Ä–∏–µ –∫ —Å–∏–≥–Ω–∞–ª—É: {confidence_stars} ({confidence}/5)"
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print(">>> MAIN START")
    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("balance", check_balance))
        app.add_handler(CommandHandler("price", price))
        app.add_handler(CommandHandler("setkey", setkey))
        app.add_handler(CommandHandler("log", show_log))

        # –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("status", trading_status))
        app.add_handler(CommandHandler("trading_status", trading_status_full))
        app.add_handler(CommandHandler("risk", set_risk))
        app.add_handler(CommandHandler("analyze", analyze))
        app.add_handler(CommandHandler("pause", pause_trading))
        app.add_handler(CommandHandler("resume", resume_trading))

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        async def signal_checker():
            while True:
                if config.TRADING_ENABLED:
                    result = analyze_market_smart()
                    if "–°–ò–ì–ù–ê–õ:" in result:
                        logging.info(f"AUTO_SIGNAL | {result}")
                        await app.bot.send_message(chat_id=CHAT_ID, text=f"üì° –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª:\n\n{result}")
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ JobQueue (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫—É event loop)
        app.job_queue.run_repeating(lambda _: asyncio.create_task(signal_checker()), interval=60)

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()

    except Exception as e:
        print("üõë –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê:")
        print(str(e))


if __name__ == "__main__":
    main()
