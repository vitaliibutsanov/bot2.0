
import ccxt
import os
import logging
import asyncio
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta, time as dtime
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from dotenv import load_dotenv
import ta
from ta.volatility import BollingerBands
from ta.trend import EMAIndicator
from ta.volatility import AverageTrueRange

# ===== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =====
logging.basicConfig(
    filename='trades.log',
    format='%(asctime)s | %(levelname)s | %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)

# ===== –ö–û–ù–§–ò–ì =====
class TradingConfig:
    RISK_PER_TRADE = 0.02       # –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (2%)
    MAX_TRADES_PER_DAY = 40     # –õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
    STOP_LOSS = 0.05            # –°—Ç–æ–ø-–ª–æ—Å—Å (5%)
    TAKE_PROFIT = 0.10          # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (10%)
    TRADING_ENABLED = False     # –§–ª–∞–≥ —Ç–æ—Ä–≥–æ–≤–ª–∏
    AUTO_TRADING = False        # –†–µ–∂–∏–º –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏
    LOSE_STREAK = 0             # –°—á—ë—Ç—á–∏–∫ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    PAUSE_UNTIL = None          # –ü–∞—É–∑–∞
config = TradingConfig()

# ===== –í–ò–†–¢–£–ê–õ–¨–ù–´–ô –ü–û–†–¢–§–ï–õ–¨ =====
class VirtualPortfolio:
    def __init__(self, initial_balance=1000):
        self.initial_balance = initial_balance
        self.balance = initial_balance
        self.history = []  # [(datetime, pnl_value)]

    def apply_trade(self, pnl_usdt):
        self.balance += pnl_usdt
        self.history.append((datetime.now(), pnl_usdt))
        logging.info(f"VIRTUAL_PNL | {pnl_usdt:.2f} USDT | Balance={self.balance:.2f} USDT")

    def calculate_report(self, days: int):
        cutoff = datetime.now() - timedelta(days=days)
        pnl_sum = sum(p for (t, p) in self.history if t >= cutoff)
        percent = (pnl_sum / self.initial_balance) * 100
        return pnl_sum, percent

    def full_report(self):
        d, dp = self.calculate_report(1)
        w, wp = self.calculate_report(7)
        m, mp = self.calculate_report(30)
        return (
            f"üìä –û—Ç—á—ë—Ç –ø–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é:\n"
            f"–ë–∞–ª–∞–Ω—Å: {self.balance:.2f} USDT\n"
            f"24—á: {d:.2f} USDT ({dp:.2f}%)\n"
            f"7–¥: {w:.2f} USDT ({wp:.2f}%)\n"
            f"30–¥: {m:.2f} USDT ({mp:.2f}%)"
        )
virtual_portfolio = VirtualPortfolio(1000)

# ===== –ó–ê–ì–†–£–ó–ö–ê API –ö–õ–Æ–ß–ï–ô =====
load_dotenv()
binance = ccxt.binance({
    'apiKey': os.getenv('BINANCE_API_KEY'),
    'secret': os.getenv('BINANCE_API_SECRET'),
    'options': {'adjustForTimeDifference': True}
})
binance.set_sandbox_mode(True)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = int(os.getenv('TELEGRAM_CHAT_ID'))

def get_binance_balance():
    try:
        balance = binance.fetch_balance()
        return {
            'USDT': round(balance.get('USDT', {}).get('free', 0), 2),
            'BTC': round(balance.get('BTC', {}).get('free', 0), 6),
            'ETH': round(balance.get('ETH', {}).get('free', 0), 6),
        }
    except Exception as e:
        logging.error(f"BALANCE_ERROR: {e}")
        return {'USDT': 0, 'BTC': 0, 'ETH': 0}

# ===== –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ =====
def get_technical_indicators(symbol: str, timeframe='1h', limit=100):
    try:
        ohlcv = binance.fetch_ohlcv(symbol, timeframe='1m', limit=50)
        closes = [c[4] for c in ohlcv]
        volumes = [c[5] for c in ohlcv]
        if len(closes) < 20:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.")

        rsi = ta.momentum.rsi(pd.Series(closes), window=14).iloc[-1]
        bb = BollingerBands(pd.Series(closes), window=20, window_dev=2)
        bb_high, bb_low = bb.bollinger_hband().iloc[-1], bb.bollinger_lband().iloc[-1]

        return closes[-1], round(rsi, 2), round(bb_high, 2), round(bb_low, 2), round(volumes[-1], 3)
    except Exception as e:
        logging.error(f"TECHNICAL_INDICATORS_ERROR: {e}")
        return None, None, None, None, None

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–¨–Æ–ß–ï–†–°–ê–ú–ò =====
class FuturesManager:
    def __init__(self):
        self.active_positions = {}
        self.loss_streak = 0
        self.max_loss_streak = 3
        self.cooldown_until = None

    def is_paused(self):
        return self.cooldown_until and datetime.now() < self.cooldown_until

    async def open_position(self, symbol, side, amount, leverage=5, stop_loss=None, take_profit=None):
        if self.is_paused():
            return False, f"–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –ø–∞—É–∑–µ –¥–æ {self.cooldown_until.strftime('%H:%M:%S')}."
        try:
            binance.set_leverage(leverage, symbol)
            order = binance.create_order(symbol=symbol, type='MARKET', side=side, amount=amount)
            entry_price = order.get('price', binance.fetch_ticker(symbol)['last'])
            self.active_positions[order['id']] = {
                'symbol': symbol,
                'side': side,
                'amount': amount,
                'entry_price': entry_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'opened_at': datetime.now()
            }
            logging.info(f"FUTURES_OPEN | {symbol} | {side} | {amount} @ {entry_price}")
            return True, order
        except Exception as e:
            logging.error(f"FUTURES_ERROR | {symbol} | {str(e)}")
            return False, str(e)

    async def close_position(self, position_id):
        try:
            pos = self.active_positions.get(position_id)
            if not pos:
                return False, "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            side = 'SELL' if pos['side'] == 'BUY' else 'BUY'
            binance.create_order(symbol=pos['symbol'], type='MARKET', side=side, amount=pos['amount'])
            logging.info(f"FUTURES_CLOSE | {pos['symbol']} | {pos['side']} | {pos['amount']}")
            del self.active_positions[position_id]
            return True, "–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞."
        except Exception as e:
            return False, str(e)

    async def check_positions(self):
        closed_positions = []
        for pid, pos in list(self.active_positions.items()):
            try:
                ticker = binance.fetch_ticker(pos['symbol'])
                price = ticker['last']
                side = pos['side']
                if pos['take_profit'] and ((side == 'BUY' and price >= pos['take_profit']) or (side == 'SELL' and price <= pos['take_profit'])):
                    await self.close_position(pid)
                    closed_positions.append(f"TP —Å—Ä–∞–±–æ—Ç–∞–ª: {pos['symbol']} @ {price:.2f}")
                    continue
                if pos['stop_loss'] and ((side == 'BUY' and price <= pos['stop_loss']) or (side == 'SELL' and price >= pos['stop_loss'])):
                    await self.close_position(pid)
                    self.loss_streak += 1
                    if self.loss_streak >= self.max_loss_streak:
                        self.cooldown_until = datetime.now() + timedelta(hours=6)
                        logging.warning("PAUSE | 3 —É–±—ã—Ç–∫–∞ –ø–æ–¥—Ä—è–¥. –ü–∞—É–∑–∞ 6 —á–∞—Å–æ–≤.")
                    closed_positions.append(f"SL —Å—Ä–∞–±–æ—Ç–∞–ª: {pos['symbol']} @ {price:.2f}")
            except Exception as e:
                logging.error(f"CHECK_POSITION_ERROR | {pid} | {str(e)}")
        return closed_positions

futures_manager = FuturesManager()
# ===== –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê =====
def analyze_market_smart(symbol='BTC/USDT', timeframe='1h', limit=100):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: RSI, Bollinger, EMA, ATR, —Å—Ç–∞–∫–∞–Ω."""
    try:
        price, rsi, bb_upper, bb_lower, volume = get_technical_indicators(symbol)
        if price is None:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."

        # EMA (20)
        closes = [c[4] for c in binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=50)]
        ema = EMAIndicator(pd.Series(closes), window=20).ema_indicator().iloc[-1]

        # ATR (14)
        df = pd.DataFrame(binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=20),
                          columns=['time', 'open', 'high', 'low', 'close', 'volume'])
        atr = AverageTrueRange(high=df['high'], low=df['low'], close=df['close'], window=14).average_true_range().iloc[-1]

        # –ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã
        price_position = "üîπ –¶–µ–Ω–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏"
        if price <= bb_lower:
            price_position = "üü¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"
        elif price >= bb_upper:
            price_position = "üî¥ –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"

        # –°—Ç–∞–∫–∞–Ω
        orderbook = binance.fetch_order_book(symbol, limit=10)
        bid_volume = sum([b[1] for b in orderbook['bids'][:3]])
        ask_volume = sum([a[1] for a in orderbook['asks'][:3]])
        imbalance = (bid_volume - ask_volume) / max(bid_volume + ask_volume, 1)

        # –°–∏–≥–Ω–∞–ª
        confidence = 0
        if rsi < 35: confidence += 1
        if price <= bb_lower: confidence += 1
        if imbalance > 0.2: confidence += 1
        if price > ema: confidence += 1
        if atr > 0: confidence += 1

        signal = "‚ùï –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞"
        if confidence >= 4 and rsi < 35:
            signal = "üìà –°–ò–ì–ù–ê–õ: –ü–û–ö–£–ü–ê–¢–¨"
        elif confidence >= 4 and rsi > 65:
            signal = "üìâ –°–ò–ì–ù–ê–õ: –ü–†–û–î–ê–í–ê–¢–¨"

        logging.info(
            f"ANALYZE_SMART | {symbol} | Price={price:.2f} | RSI={rsi:.2f} | BB=({bb_lower:.2f}/{bb_upper:.2f}) | "
            f"EMA={ema:.2f} | ATR={atr:.2f} | Bid={bid_volume:.2f} Ask={ask_volume:.2f} | Conf={confidence} | {signal}"
        )

        return (
            f"{signal}\n{price_position}\n"
            f"üìâ RSI: {rsi:.2f}\n"
            f"üìè EMA: {ema:.2f}\n"
            f"‚ö° ATR: {atr:.2f}\n"
            f"üìä –û–±—ä—ë–º: {volume:.2f}\n"
            f"üåü –î–æ–≤–µ—Ä–∏–µ: {confidence}/5"
        )
    except Exception as e:
        logging.error(f"ANALYZE_SMART_ERROR: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"


# ====== TELEGRAM –ö–û–ú–ê–ù–î–´ ======
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def check_balance(update: Update, context: CallbackContext):
    balance = get_binance_balance()
    await update.message.reply_text(
        f"üí∞ –ë–∞–ª–∞–Ω—Å:\nUSDT: {balance['USDT']}\nBTC: {balance['BTC']}\nETH: {balance['ETH']}"
    )

async def price(update: Update, context: CallbackContext):
    coin = context.args[0].upper() if context.args else 'BTC'
    ticker = binance.fetch_ticker(f"{coin}/USDT")
    await update.message.reply_text(f"üìä {coin}: {ticker['last']:.2f} USDT")

async def report(update: Update, context: CallbackContext):
    await update.message.reply_text(virtual_portfolio.full_report())

async def trading_status(update: Update, context: CallbackContext):
    balance = get_binance_balance()
    auto_mode = "üü¢ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –í–ö–õ" if config.AUTO_TRADING else "üî¥ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –í–´–ö–õ"
    await update.message.reply_text(
        f"{auto_mode}\n–†–∏—Å–∫: {config.RISK_PER_TRADE * 100:.1f}%\n–ë–∞–ª–∞–Ω—Å: {balance['USDT']:.2f} USDT"
    )

async def toggle_auto(update: Update, context: CallbackContext):
    config.AUTO_TRADING = not config.AUTO_TRADING
    if config.AUTO_TRADING:
        await update.message.reply_text("‚ñ∂ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω.")
        asyncio.create_task(auto_trade_cycle())
    else:
        await update.message.reply_text("‚èπ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def show_help(update: Update, context: CallbackContext):
    cmds = [
        "/start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
        "/balance ‚Äî –ë–∞–ª–∞–Ω—Å",
        "/price <COIN> ‚Äî –ö—É—Ä—Å",
        "/analyze ‚Äî –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
        "/status ‚Äî –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏",
        "/auto ‚Äî –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è –í–∫–ª/–í—ã–∫–ª",
        "/report ‚Äî –û—Ç—á—ë—Ç",
        "/help ‚Äî –ö–æ–º–∞–Ω–¥—ã"
    ]
    await update.message.reply_text("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(cmds))


# ====== –ê–í–¢–û–¢–†–ï–ô–î–ò–ù–ì ======
async def auto_trade_cycle():
    symbol = "BTC/USDT"
    position_opened = False
    entry_price = 0
    entry_amount = 0

    while config.AUTO_TRADING:
        try:
            signal = analyze_market_smart(symbol)
            price = binance.fetch_ticker(symbol)['last']
            balance = get_binance_balance()
            amount = round((balance['USDT'] * config.RISK_PER_TRADE) / price, 6)

            if "–ü–û–ö–£–ü–ê–¢–¨" in signal and not position_opened:
                success, order = await futures_manager.open_position(
                    symbol, "BUY", amount, leverage=5,
                    stop_loss=price * (1 - config.STOP_LOSS),
                    take_profit=price * (1 + config.TAKE_PROFIT)
                )
                if success:
                    position_opened = True
                    entry_price = price
                    entry_amount = amount
                    await app.bot.send_message(
                        chat_id=CHAT_ID,
                        text=(f"üìà LONG {symbol}\n–¶–µ–Ω–∞: {price:.2f} USDT\n–û–±—ä—ë–º: {amount} BTC")
                    )

            elif "–ü–†–û–î–ê–í–ê–¢–¨" in signal and position_opened:
                pid = next(iter(futures_manager.active_positions))
                success, result = await futures_manager.close_position(pid)
                if success:
                    position_opened = False
                    exit_price = binance.fetch_ticker(symbol)['last']
                    pnl_usdt = (exit_price - entry_price) * entry_amount
                    virtual_portfolio.apply_trade(pnl_usdt)
                    await app.bot.send_message(
                        chat_id=CHAT_ID,
                        text=(f"{'‚úÖ' if pnl_usdt >= 0 else '‚ùå'} –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞:\n"
                              f"{symbol}\nPnL: {pnl_usdt:.2f} USDT\n"
                              f"–ë–∞–ª–∞–Ω—Å: {virtual_portfolio.balance:.2f} USDT")
                    )

        except Exception as e:
            logging.error(f"AUTO_TRADE_ERROR: {e}")
        await asyncio.sleep(60)


# ===== –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ =====
async def daily_report(context: CallbackContext):
    await context.bot.send_message(chat_id=CHAT_ID, text=virtual_portfolio.full_report())


# ====== MAIN ======
def main():
    global app
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("balance", check_balance))
    app.add_handler(CommandHandler("price", price))
    app.add_handler(CommandHandler("analyze", lambda u, c: u.message.reply_text(analyze_market_smart())))
    app.add_handler(CommandHandler("status", trading_status))
    app.add_handler(CommandHandler("auto", toggle_auto))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("help", show_help))

    app.job_queue.run_daily(daily_report, time=dtime(hour=20, minute=0))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
