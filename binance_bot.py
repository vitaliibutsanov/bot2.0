import ccxt  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ctxt –Ω–∞ ccxt
import os
import time
import logging
import asyncio
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
from ta import momentum
import ta
from ta.trend import EMAIndicator
from ta.volatility import AverageTrueRange
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext, ContextTypes
from dotenv import load_dotenv
from ta.momentum import RSIIndicator
from ta.volatility import BollingerBands

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
logging.basicConfig(
    filename='trades.log',
    format='%(asctime)s | %(levelname)s | %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S'
)

COMMANDS = []

def register_command(app, command, handler, description=""):
    app.add_handler(CommandHandler(command, handler))
    COMMANDS.append((command, description))

class TradingConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    RISK_PER_TRADE = 0.02  # 2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
    MAX_TRADES_PER_DAY = 5
    STOP_LOSS = 0.05  # 5%
    TAKE_PROFIT = 0.10  # 10%
    TRADING_ENABLED = False  # –§–ª–∞–≥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    AUTO_TRADING = False  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Å–∏–≥–Ω–∞–ª—É
    LOSE_STREAK = 0           # –ö–æ–ª-–≤–æ –ø–æ–¥—Ä—è–¥ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    PAUSE_UNTIL = None        # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—É–∑—ã

config = TradingConfig()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance
binance = ccxt.binanceusdm({
    'apiKey': os.getenv('BINANCE_API_KEY'),
    'secret': os.getenv('BINANCE_API_SECRET'),
    'options': {'adjustForTimeDifference': True}
})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHAT_ID = int(os.getenv('TELEGRAM_CHAT_ID'))

def get_binance_balance():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å Binance"""
    balance = binance.fetch_balance()
    return {
        'USDT': balance['total']['USDT'],
        'BTC': balance['total']['BTC'],
        'ETH': balance['total']['ETH']
    }

def get_technical_indicators(symbol='BTC/USDT', timeframe='1h', limit=100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (RSI, Bollinger Bands)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi = RSIIndicator(df['close'], window=14).rsi().iloc[-1]
        bb = BollingerBands(df['close'], window=20)

        return {
            'rsi': round(rsi, 2),
            'bb_upper': round(bb.bollinger_hband().iloc[-1], 2),
            'bb_lower': round(bb.bollinger_lband().iloc[-1], 2),
            'price': df['close'].iloc[-1],
            'volume': df['volume'].iloc[-1]
        }

    except Exception as e:
        logging.error(f"TECH_INDICATOR_ERROR | {symbol} | {str(e)}")
        return None

def analyze_market(symbol='BTC/USDT', timeframe='1h', limit=100):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: RSI + —Å—Ç–∞–∫–∞–Ω + –æ–±—ä—ë–º—ã + BollingerBands"""
    indicators = get_technical_indicators(symbol, timeframe, limit)
    if not indicators:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."

    price = indicators['price']
    rsi = indicators['rsi']
    bb_upper = indicators['bb_upper']
    bb_lower = indicators['bb_lower']
    volume = indicators['volume']

    try:
        orderbook = binance.fetch_order_book(symbol, limit=10)
        bids = orderbook['bids']
        asks = orderbook['asks']
        bid_volume = sum([b[1] for b in bids[:3]])  # –±–ª–∏–∂–Ω–∏–µ 3 —É—Ä–æ–≤–Ω—è
        ask_volume = sum([a[1] for a in asks[:3]])
        total_bid = sum([b[1] for b in bids])
        total_ask = sum([a[1] for a in asks])
    except Exception as e:
        logging.error(f"ORDERBOOK_ERROR | {symbol} | {str(e)}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞."

    imbalance = (bid_volume - ask_volume) / max(bid_volume + ask_volume, 1)
    position = "üîπ –¶–µ–Ω–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏"
    if price <= bb_lower:
        position = "üü¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"
    elif price >= bb_upper:
        position = "üî¥ –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"

    signal = "ü§î –°–∏–≥–Ω–∞–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"

    if rsi < 35 and imbalance > 0.2 and price <= bb_lower and volume > 0:
        signal = "üìà –°–ò–ì–ù–ê–õ: –ü–û–ö–£–ü–ê–¢–¨ (RSI < 35, —Å–ø—Ä–æ—Å, BB –Ω–∏–∂–Ω—è—è)"
    elif rsi > 65 and imbalance < -0.2 and price >= bb_upper and volume > 0:
        signal = "üìâ –°–ò–ì–ù–ê–õ: –ü–†–û–î–ê–í–ê–¢–¨ (RSI > 65, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, BB –≤–µ—Ä—Ö–Ω—è—è)"
    else:
        signal = "‚è∏ –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞ ‚Äî –∂–¥—É —Å–∏–≥–Ω–∞–ª–∞"

    log_msg = (
        f"ANALYZE | {symbol} | Price={price:.2f} | RSI={rsi} | "
        f"BB=({bb_lower:.2f}/{bb_upper:.2f}) | Pos={position} | "
        f"Bid={bid_volume:.2f} Ask={ask_volume:.2f} | Imb={imbalance:.2f} | {signal}"
    )
    logging.info(log_msg)

    return f"{signal}\n{position}\nRSI: {rsi:.2f}\n–û–±—ä—ë–º: {volume:.2f}"

def plot_indicators(symbol='BTC/USDT', timeframe='1h', limit=100):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    try:
        data = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(data, columns=['time', 'open', 'high', 'low', 'close', 'volume'])

        plt.figure(figsize=(12, 6))
        plt.plot(df['close'], label='Price', color='blue')

        # –î–æ–±–∞–≤–ª—è–µ–º Bollinger Bands
        bb = BollingerBands(df['close'], window=20)
        plt.plot(bb.bollinger_hband(), label='Upper Band', linestyle='--', color='red')
        plt.plot(bb.bollinger_lband(), label='Lower Band', linestyle='--', color='green')

        plt.title(f"Symbol: {symbol} Price change")
        plt.legend()
        plt.grid(True)
        plt.savefig('chart.png', bbox_inches='tight', dpi=100)
        plt.close()

        return open('chart.png', 'rb')

    except Exception as e:
        logging.error(f"CHART_ERROR | {symbol} | {str(e)}")
        return None
    
class FuturesManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ —Å TP/SL –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–µ—Ä–∏–∏ —É–±—ã—Ç–∫–æ–≤"""
    def __init__(self):
        self.active_positions = {}  # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        self.loss_streak = 0        # –ö–æ–ª-–≤–æ —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø–æ–¥—Ä—è–¥
        self.max_loss_streak = 3    # –°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Å–æ–≤ –ø–æ–¥—Ä—è–¥ –¥–æ –ø–∞—É–∑—ã
        self.cooldown_until = None  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—É–∑—ã (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞)

    def is_paused(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–∞—É–∑–∞"""
        if self.cooldown_until and datetime.now() < self.cooldown_until:
            return True
        return False

    async def open_position(self, symbol, side, amount, leverage=5, stop_loss=None, take_profit=None):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö"""
        if self.is_paused():
            return False, f"–¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {self.cooldown_until.strftime('%H:%M:%S')}."

        try:
            binance.set_leverage(leverage, symbol)
            order = binance.create_order(
                symbol=symbol,
                type='MARKET',
                side=side,
                amount=amount
            )

            entry_price = order['price'] if 'price' in order else binance.fetch_ticker(symbol)['last']
            self.active_positions[order['id']] = {
                'symbol': symbol,
                'side': side,
                'amount': amount,
                'entry_price': entry_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'opened_at': datetime.now()
            }

            logging.info(f"FUTURES_OPEN | {symbol} | {side} | {amount} @ {entry_price}")
            return True, order

        except Exception as e:
            logging.error(f"FUTURES_ERROR | {symbol} | {str(e)}")
            return False, str(e)

    async def check_positions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ TP/SL –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        closed_positions = []
        for pid, pos in list(self.active_positions.items()):
            try:
                ticker = binance.fetch_ticker(pos['symbol'])
                price = ticker['last']
                side = pos['side']

                if pos['take_profit'] and ((side == 'BUY' and price >= pos['take_profit']) or (side == 'SELL' and price <= pos['take_profit'])):
                    await self.close_position(pid)
                    closed_positions.append(f"TP —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ {pos['symbol']} @ {price:.2f}")
                    continue

                if pos['stop_loss'] and ((side == 'BUY' and price <= pos['stop_loss']) or (side == 'SELL' and price >= pos['stop_loss'])):
                    await self.close_position(pid)
                    self.loss_streak += 1
                    if self.loss_streak >= self.max_loss_streak:
                        self.cooldown_until = datetime.now() + timedelta(hours=6)
                        logging.warning(f"PAUSE | –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 6 —á–∞—Å–æ–≤ –∏–∑-–∑–∞ 3 —É–±—ã—Ç–∫–æ–≤ –ø–æ–¥—Ä—è–¥.")
                    closed_positions.append(f"SL —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ {pos['symbol']} @ {price:.2f}")
                    continue

            except Exception as e:
                logging.error(f"CHECK_POSITION_ERROR | {pid} | {str(e)}")

        return closed_positions

    async def close_position(self, position_id):
        """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
        try:
            pos = self.active_positions.get(position_id)
            if not pos:
                return False, "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

            side = 'SELL' if pos['side'] == 'BUY' else 'BUY'
            binance.create_order(
                symbol=pos['symbol'],
                type='MARKET',
                side=side,
                amount=pos['amount']
            )

            logging.info(f"FUTURES_CLOSE | {pos['symbol']} | {pos['side']} | {pos['amount']}")
            del self.active_positions[position_id]
            return True, "–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞."
        except Exception as e:
            return False, str(e)

class PositionManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
    def __init__(self):
        self.active_positions = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π

    async def open_position(self, symbol, amount, stop_loss=None, take_profit=None):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if not config.TRADING_ENABLED:
            return False, "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"

        if len(self.active_positions) >= config.MAX_TRADES_PER_DAY:
            return False, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫"

        try:
            balance = binance.fetch_balance()['USDT']['free']
            position_size = min(amount, balance * config.RISK_PER_TRADE)

            order = binance.create_order(
                symbol=symbol,
                type='MARKET',
                side='buy',
                amount=position_size,
                params={'stopLoss': stop_loss} if stop_loss else {}
            )

            self.active_positions[order['id']] = {
                'symbol': symbol,
                'amount': position_size,
                'entry_price': order['price'],
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'opened_at': datetime.now()
            }

            logging.info(f"OPEN_POSITION | {symbol} | {position_size}")
            return True, order

        except Exception as e:
            logging.error(f"POSITION_ERROR | {symbol} | {str(e)}")
            return False, str(e)
               
def is_binance_alive():
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥ Binance ‚Äî True, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å—Ç—å"""
    try:
        binance.fetch_time()
        return True
    except Exception:
        return False

def positions_summary():
    """–ö–æ—Ä–æ—Ç–∫–æ –æ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"""
    if not position_manager.active_positions:
        return "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    summary = []
    for pid, pos in position_manager.active_positions.items():
        sym   = pos['symbol']
        amt   = pos['amount']
        price = pos['entry_price']
        summary.append(f"{sym}: {amt:.6f} @ {price:.2f}")
    return "\n".join(summary)

position_manager = PositionManager()
futures_manager = FuturesManager()

async def check_balance(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
    try:
        balance = get_binance_balance()
        response = f"""
üí∞ –í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:
USDT: {balance['USDT']:.2f}
BTC: {balance['BTC']:.6f}
ETH: {balance['ETH']:.6f}
        """
        await update.message.reply_text(response)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è Binance –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/price BTC - –ö—É—Ä—Å BTC"
    )

# –ö–æ–º–∞–Ω–¥–∞ /setkey: —Å–º–µ–Ω–∞ API –∫–ª—é—á–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
async def setkey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    allowed_users = [6107092031]  # ‚ùó –£–ö–ê–ñ–ò –°–í–û–ô Telegram ID

    if user_id not in allowed_users:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n/setkey <API_KEY> <API_SECRET>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n/setkey AbC123xYz AbC456qWe\n\n"
            "–û–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ –∫–ª—é—á–µ–π."
        )
        return

    api_key, api_secret = context.args

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –¥–ª–∏–Ω–∞ –∏ —Å–∏–º–≤–æ–ª—ã
    if not (10 <= len(api_key) <= 100) or not (10 <= len(api_secret) <= 100):
        await update.message.reply_text("‚ùó –ü–æ—Ö–æ–∂–µ, –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π.")
        return

    if ' ' in api_key or ' ' in api_secret:
        await update.message.reply_text("‚ùó –ö–ª—é—á–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    env_path = ".env"

    try:
        with open(env_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
    except FileNotFoundError:
        lines = []

    def update_or_append(var, value, lines):
        found = False
        for i in range(len(lines)):
            if lines[i].startswith(f"{var}="):
                lines[i] = f"{var}={value}\n"
                found = True
        if not found:
            lines.append(f"{var}={value}\n")

    update_or_append("BINANCE_API_KEY", api_key, lines)
    update_or_append("BINANCE_API_SECRET", api_secret, lines)

    try:
        with open(env_path, "w", encoding="utf-8") as f:
            f.writelines(lines)
        load_dotenv(override=True)
        await update.message.reply_text("‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}")


async def price(update: Update, context: CallbackContext):
    """–ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    try:
        coin = context.args[0].upper() if context.args else 'BTC'
        ticker = binance.fetch_ticker(f"{coin}/USDT")
        await update.message.reply_text(
            f"üìä {coin}: {ticker['last']:.2f} USDT\n"
            f"24h: {ticker['percentage']:.2f}%"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def trading_status(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    status = "üü¢ –ê–ö–¢–ò–í–ï–ù" if config.TRADING_ENABLED else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
    await update.message.reply_text(
        f"–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏: {status}\n"
        f"–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {config.RISK_PER_TRADE * 100}%\n"
        f"–õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫: {len(position_manager.active_positions)}/{config.MAX_TRADES_PER_DAY}"
    )

async def set_risk(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
    try:
        risk = float(context.args[0]) / 100
        if 0.001 <= risk <= 0.1:  # 0.1% - 10%
            config.RISK_PER_TRADE = risk
            msg = f"üîê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∏—Å–∫: {risk * 100}%"
        else:
            msg = "‚ùå –†–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0.1% –∏ 10%"
        logging.info(f"CONFIG | RISK_SET | {risk * 100}%")
    except Exception:
        msg = "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /risk 2.5 (–¥–ª—è 2.5% —Ä–∏—Å–∫–∞)"
    
    await update.message.reply_text(msg)

async def show_log(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /log ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ trades.log"""
    try:
        num_lines = int(context.args[0]) if context.args else 20
        with open("trades.log", "r", encoding="utf-8") as file:
            lines = file.readlines()[-num_lines:]
            if lines:
                output = "üßæ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n" + "".join(lines)
                await update.message.reply_text(f"<pre>{output}</pre>", parse_mode="HTML")
            else:
                await update.message.reply_text("üì≠ –õ–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
    except FileNotFoundError:
        await update.message.reply_text("‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞: {e}")

async def trading_status_full(update: Update, context: CallbackContext):
    """–†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    api_status   = "üü¢ –û–Ω–ª–∞–π–Ω" if is_binance_alive() else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
    trade_status = "üü¢ –ê–ö–¢–ò–í–ï–ù" if config.TRADING_ENABLED else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
    open_pos     = positions_summary()
    balance      = get_binance_balance()

    msg = (
        f"üì° Binance API: {api_status}\n"
        f"üìà –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏: {trade_status}\n"
        f"üîí –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {config.RISK_PER_TRADE*100:.2f}%\n"
        f"üéØ –õ–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫: {len(position_manager.active_positions)}/{config.MAX_TRADES_PER_DAY}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance['USDT']:.2f} USDT\n"
        f"üõí –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n{open_pos}"
    )
    await update.message.reply_text(msg)

async def analyze(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞"""
    try:
        symbol = context.args[0].upper() + "/USDT" if context.args else "BTC/USDT"
        result = analyze_market_smart(symbol)
        await update.message.reply_text(result)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

async def auto_trade_if_signal(symbol='BTC/USDT'):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
    if not config.TRADING_ENABLED:
        return

    signal_text = analyze_market(symbol)
    logging.info(f"AUTO_TRADE_CHECK | {symbol} | {signal_text}")

    # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    if "–ü–û–ö–£–ü–ê–¢–¨" in signal_text:
        try:
            result, detail = await position_manager.open_position(symbol, amount=1.0)
            msg = "‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: –ü–û–ö–£–ü–ö–ê" if result else f"‚ùå –û—à–∏–±–∫–∞: {detail}"
        except Exception as e:
            msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}"
        logging.info(f"AUTO_TRADE_BUY | {msg}")

    elif "–ü–†–û–î–ê–í–ê–¢–¨" in signal_text:
        # –ó–¥–µ—Å—å –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ ‚Äî –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        logging.info("AUTO_TRADE_SELL | ‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

    else:
        logging.info("AUTO_TRADE_SKIP | –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≤—Ö–æ–¥–∞.")

async def pause_trading(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /pause ‚Äî –æ—Ç–∫–ª—é—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é"""
    config.TRADING_ENABLED = False
    logging.info("CONFIG | TRADING PAUSED")
    await update.message.reply_text("‚õî –¢–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def resume_trading(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /resume ‚Äî –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é"""
    config.TRADING_ENABLED = True
    logging.info("CONFIG | TRADING RESUMED")
    await update.message.reply_text("üü¢ –¢–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

def get_technical_indicators(symbol: str, timeframe: str, limit: int):
    try:
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

        indicators = {}

        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        indicators['price'] = df['close'].iloc[-1]
        indicators['rsi'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi().iloc[-1]

        bb = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
        indicators['bb_upper'] = bb.bollinger_hband().iloc[-1]
        indicators['bb_lower'] = bb.bollinger_lband().iloc[-1]

        indicators['volume'] = df['volume'].iloc[-1]

        # üîÑ –ù–æ–≤–æ–µ: EMA –∏ ATR
        indicators['ema'] = ta.trend.EMAIndicator(df['close'], window=20).ema_indicator().iloc[-1]
        indicators['atr'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'], window=14).average_true_range().iloc[-1]

        return indicators

    except Exception as e:
        logging.error(f"‚ùå INDICATOR_ERROR | {symbol} | {str(e)}")
        return None

def analyze_market_smart(symbol='BTC/USDT', timeframe='1h', limit=100):
    """üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –¥–æ–≤–µ—Ä–∏–µ–º –∫ —Å–∏–≥–Ω–∞–ª—É"""
    indicators = get_technical_indicators(symbol, timeframe, limit)
    if not indicators:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."

    price = indicators['price']
    rsi = indicators['rsi']
    bb_upper = indicators['bb_upper']
    bb_lower = indicators['bb_lower']
    ema = indicators.get('ema', None)
    atr = indicators.get('atr', None)
    volume = indicators['volume']

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ None ‚Üí N/A)
    ema_text = f"{ema:.2f}" if ema is not None else "N/A"
    atr_text = f"{atr:.2f}" if atr is not None else "N/A"
    volume_text = f"{volume:.2f}" if volume is not None else "N/A"

    try:
        orderbook = binance.fetch_order_book(symbol, limit=10)
        bids = orderbook['bids']
        asks = orderbook['asks']
        bid_volume = sum([b[1] for b in bids[:3]])
        ask_volume = sum([a[1] for a in asks[:3]])
    except Exception as e:
        logging.error(f"ORDERBOOK_ERROR | {symbol} | {str(e)}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞."

    imbalance = (bid_volume - ask_volume) / max(bid_volume + ask_volume, 1)
    price_position = "üîπ –¶–µ–Ω–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏"
    if price <= bb_lower:
        price_position = "üü¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"
    elif price >= bb_upper:
        price_position = "üî¥ –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"

    # ‚Üì‚Üì‚Üì –õ–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–æ–≤–µ—Ä–∏—è –∫ —Å–∏–≥–Ω–∞–ª—É ‚Üì‚Üì‚Üì
    signal = "‚ùï –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞"
    confidence = 0  # —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –∫ —Å–∏–≥–Ω–∞–ª—É

    if rsi < 35:
        confidence += 1
    if price <= bb_lower:
        confidence += 1
    if imbalance > 0.2:
        confidence += 1
    if volume > 0:
        confidence += 1
    if ema is not None and price > ema:
        confidence += 1
    if atr is not None and atr > 0:
        confidence += 1

    if confidence >= 4 and rsi < 35:
        signal = "üìà –°–ò–ì–ù–ê–õ: –ü–û–ö–£–ü–ê–¢–¨"
    elif confidence >= 4 and rsi > 65:
        signal = "üìâ –°–ò–ì–ù–ê–õ: –ü–†–û–î–ê–í–ê–¢–¨"

    log_msg = (
        f"üß† ANALYZE_SMART | {symbol} | Price={price:.2f} | RSI={rsi:.2f} | "
        f"BB=({bb_lower:.2f}/{bb_upper:.2f}) | EMA={ema_text} | ATR={atr_text} | "
        f"Bid={bid_volume:.2f} Ask={ask_volume:.2f} | Imb={imbalance:.2f} | Confidence={confidence} | {signal}"
    )
    logging.info(log_msg)

    return (
        f"{signal}\n"
        f"{price_position}\n"
        f"üìâ RSI: {rsi:.2f}\n"
        f"üìè EMA: {ema_text}\n"
        f"‚ö° ATR: {atr_text}\n"
        f"üìä –û–±—ä—ë–º: {volume_text}\n"
        f"üåü –î–æ–≤–µ—Ä–∏–µ –∫ —Å–∏–≥–Ω–∞–ª—É: {confidence}/6"
    )

async def open_long(update: Update, context: CallbackContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ LONG –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö"""
    try:
        if len(context.args) < 1:
            await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /long <AMOUNT> [LEVERAGE]")
            return

        amount = float(context.args[0])
        leverage = int(context.args[1]) if len(context.args) > 1 else 5

        success, result = await futures_manager.open_position(
            symbol="BTC/USDT", side="BUY", amount=amount, leverage=leverage
        )
        if success:
            await update.message.reply_text(f"‚úÖ LONG –æ—Ç–∫—Ä—ã—Ç: {result}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def open_short(update: Update, context: CallbackContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö"""
    try:
        if len(context.args) < 1:
            await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /short <AMOUNT> [LEVERAGE]")
            return

        amount = float(context.args[0])
        leverage = int(context.args[1]) if len(context.args) > 1 else 5

        success, result = await futures_manager.open_position(
            symbol="BTC/USDT", side="SELL", amount=amount, leverage=leverage
        )
        if success:
            await update.message.reply_text(f"‚úÖ SHORT –æ—Ç–∫—Ä—ã—Ç: {result}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def show_positions(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
    if not futures_manager.active_positions:
        await update.message.reply_text("üì≠ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç.")
        return

    text = "üìå *–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:*\n"
    for pid, pos in futures_manager.active_positions.items():
        text += f"- {pos['symbol']} | {pos['side']} | {pos['amount']} @ {pos['entry_price']}\n"

    await update.message.reply_text(text, parse_mode="Markdown")

async def set_tp_sl(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP –∏ SL –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        if len(context.args) < 2:
            await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tp_sl <TP%> <SL%>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /tp_sl 5 2")
            return

        tp_percent = float(context.args[0]) / 100
        sl_percent = float(context.args[1]) / 100

        if not futures_manager.active_positions:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TP/SL.")
            return

        for pid, pos in futures_manager.active_positions.items():
            entry_price = pos['entry_price']
            if pos['side'] == "BUY":
                pos['take_profit'] = entry_price * (1 + tp_percent)
                pos['stop_loss'] = entry_price * (1 - sl_percent)
            else:
                pos['take_profit'] = entry_price * (1 - tp_percent)
                pos['stop_loss'] = entry_price * (1 + sl_percent)

        await update.message.reply_text(
            f"‚úÖ TP = {tp_percent*100:.1f}%, SL = {sl_percent*100:.1f}% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π."
        )
        logging.info(f"TP_SL_SET | TP={tp_percent} | SL={sl_percent}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def toggle_auto(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-—Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    config.AUTO_TRADING = not getattr(config, "AUTO_TRADING", False)
    state = "üü¢ –ê–≤—Ç–æ-—Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω" if config.AUTO_TRADING else "üî¥ –ê–≤—Ç–æ-—Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω"
    await update.message.reply_text(state)
    logging.info(f"AUTO_TRADING | {state}")

from datetime import datetime, timedelta

from datetime import datetime, timedelta

async def update_trade_result(profit: float, app):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏.
    :param profit: –ø—Ä–∏–±—ã–ª—å (–µ—Å–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è ‚Äî —É–±—ã—Ç–æ–∫).
    :param app: –æ–±—ä–µ–∫—Ç Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    if profit < 0:
        config.LOSE_STREAK += 1
        logging.info(f"LOSE STREAK: {config.LOSE_STREAK}")
        if config.LOSE_STREAK >= 3:
            config.TRADING_ENABLED = False
            config.PAUSE_UNTIL = datetime.utcnow() + timedelta(hours=6)
            await app.bot.send_message(
                chat_id=CHAT_ID,
                text="‚è∏ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 6 —á–∞—Å–æ–≤ (3 —É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥)."
            )
    else:
        config.LOSE_STREAK = 0

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
async def signal_checker():
    while True:
        try:
            if config.TRADING_ENABLED or getattr(config, "AUTO_TRADING", False):
                result = analyze_market_smart()
                if "–°–ò–ì–ù–ê–õ:" in result:
                    logging.info(f"AUTO_SIGNAL | {result}")
                    await app.bot.send_message(chat_id=CHAT_ID, text=f"üì° –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª:\n\n{result}")

                    # –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è
                    if getattr(config, "AUTO_TRADING", False):
                        side = "BUY" if "–ü–û–ö–£–ü–ê–¢–¨" in result else "SELL"
                        usdt_balance = binance.fetch_balance()['USDT']['free']
                        amount = usdt_balance * config.RISK_PER_TRADE
                        success, response = await futures_manager.open_position(
                            symbol="BTC/USDT", side=side, amount=amount
                        )
                        if success:
                            await app.bot.send_message(chat_id=CHAT_ID, text=f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã—Ç {side} –Ω–∞ {amount:.2f} USDT.")
                        else:
                            await app.bot.send_message(chat_id=CHAT_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {response}")
        except Exception as e:
            logging.error(f"signal_checker ERROR: {e}")
            await app.bot.send_message(chat_id=CHAT_ID, text=f"‚ùå –û—à–∏–±–∫–∞ –≤ signal_checker: {e}")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
async def positions_watcher():
    while True:
        try:
            closed = await futures_manager.check_positions()
            if closed:
                for msg in closed:
                    await app.bot.send_message(chat_id=CHAT_ID, text=f"üîî {msg}")
        except Exception as e:
            logging.error(f"positions_watcher ERROR: {e}")
        await asyncio.sleep(60)

async def trading_status_full(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
    try:
        balance = binance.fetch_balance()
        usdt = balance['USDT']['free']
        btc = balance['BTC']['free']

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        recent_signals = []
        try:
            with open('trades.log', 'r', encoding='utf-8') as log_file:
                lines = log_file.readlines()
                recent_signals = lines[-3:] if len(lines) >= 3 else lines
        except FileNotFoundError:
            recent_signals = ["–õ–æ–≥-—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."]

        status_lines = [
            "üìä *–†–ê–°–®–ò–†–ï–ù–ù–´–ô –°–¢–ê–¢–£–°*",
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            f"ü§ñ *–ê–≤—Ç–æ-—Ä–µ–∂–∏–º:* {'üü¢ –í–∫–ª—é—á—ë–Ω' if config.AUTO_TRADING else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}",
            f"üîê *–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É:* {config.RISK_PER_TRADE * 100:.1f}%",
            f"‚ö° *–°–¥–µ–ª–æ–∫ –ø–æ–¥—Ä—è–¥ –≤ –º–∏–Ω—É—Å:* {config.LOSE_STREAK}/3",
            f"‚è≥ *–ü–∞—É–∑–∞ –¥–æ:* {config.PAUSE_UNTIL.strftime('%Y-%m-%d %H:%M:%S') if config.PAUSE_UNTIL else '‚Äî'}",
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            f"üí∞ *–ë–∞–ª–∞–Ω—Å USDT:* {usdt:.2f}",
            f"üí∞ *–ë–∞–ª–∞–Ω—Å BTC:* {btc:.6f}",
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
            "üìà *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:*",
        ] + [f"‚Ä¢ {line.strip()}" for line in recent_signals]

        await update.message.reply_text("\n".join(status_lines), parse_mode="Markdown")
    except Exception as e:
        logging.error(f"STATUS_FULL_ERROR: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def show_help(update: Update, context: CallbackContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    help_text = "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"

    # –ì—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥
    main_commands = []
    trading_commands = []
    system_commands = []

    for cmd, desc in COMMANDS:
        if cmd in ["start", "balance", "price", "setkey"]:
            main_commands.append(f"/{cmd} ‚Äî {desc}")
        elif cmd in ["analyze", "risk", "pause", "resume", "auto", "trading_status", "status"]:
            trading_commands.append(f"/{cmd} ‚Äî {desc}")
        else:
            system_commands.append(f"/{cmd} ‚Äî {desc}")

    if main_commands:
        help_text += "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>\n" + "\n".join(main_commands) + "\n\n"
    if trading_commands:
        help_text += "üíπ <b>–¢–æ—Ä–≥–æ–≤–ª—è:</b>\n" + "\n".join(trading_commands) + "\n\n"
    if system_commands:
        help_text += "‚öô <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ:</b>\n" + "\n".join(system_commands)

    await update.message.reply_text(help_text, parse_mode="HTML")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global app
    print(">>> MAIN START")

    if not TELEGRAM_TOKEN:
        raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env")

    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ register_command
        register_command(app, "start", start, "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        register_command(app, "balance", check_balance, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        register_command(app, "price", price, "–ö—É—Ä—Å BTC")
        register_command(app, "setkey", setkey, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á")
        register_command(app, "log", show_log, "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
        register_command(app, "status", trading_status, "–ö—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å")
        register_command(app, "trading_status", trading_status_full, "–ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏")
        register_command(app, "help", show_help, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
        register_command(app, "risk", set_risk, "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∏—Å–∫ (%)")
        register_command(app, "analyze", analyze, "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
        register_command(app, "pause", pause_trading, "–ü–∞—É–∑–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
        register_command(app, "resume", resume_trading, "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
        register_command(app, "auto", toggle_auto, "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—é")
        register_command(app, "long", open_long, "–û—Ç–∫—Ä—ã—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é")
        register_command(app, "short", open_short, "–û—Ç–∫—Ä—ã—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—é")
        register_command(app, "positions", show_positions, "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        register_command(app, "tp_sl", set_tp_sl, "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TP/SL")

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ JobQueue
        app.job_queue.run_repeating(lambda _: asyncio.create_task(signal_checker()), interval=60)
        app.job_queue.run_repeating(lambda _: asyncio.create_task(positions_watcher()), interval=60)

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()

    except Exception as e:
        logging.error(f"MAIN_ERROR: {e}", exc_info=True)
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê: {e}")


if __name__ == "__main__":
    while True:
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            main()
        except Exception as e:
            logging.error(f"BOT_CRASH | {e}", exc_info=True)
            print(f"‚ùå –ë–æ—Ç —É–ø–∞–ª: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
