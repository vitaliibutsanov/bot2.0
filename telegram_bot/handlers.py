import logging 
import time
import shutil
import os
from telegram import Update
from telegram.ext import CommandHandler, CallbackContext, Application
from config import TELEGRAM_TOKEN, binance
from core.portfolio import get_portfolio_status
from core.strategy import analyze_market_smart
from core.order_manager import futures_manager
from utils.safe_send import safe_send_message

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞, risk_manager –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
from core import auto_trader
from core.risk_manager import risk_manager
from core.adaptive_optimizer import parameters_report
from core.history_analyzer import history_report_text
from core import risk_modes  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º risk_modes

logger = logging.getLogger(__name__)

# ====== –ö—ç—à –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /analyze ======
last_analyze_time = 0
last_analyze_result = "‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã."
ANALYZE_CACHE_TIME = 60  # 1 –º–∏–Ω—É—Ç–∞

# ====== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ ======
async def send_reply(update: Update, context: CallbackContext, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        logger.debug(f"COMMAND | {update.message.text}")
        await safe_send_message(context.bot, update.effective_chat.id, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# ====== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ======
async def start_command(update: Update, context: CallbackContext):
    await send_reply(update, context, "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


async def help_command(update: Update, context: CallbackContext):
    modes_info = "\n".join(
        [f"- {m}: {d['description']} (TP={d['trade_percent']*100:.1f}%, MaxPos={d['max_positions']})"
         for m, d in risk_modes.RISK_MODES.items()]
    )
    commands = (
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/price <symbol> [quote] - –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã\n"
        "/analyze - –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∞\n"
        "/auto - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç—Ä–µ–π–¥\n"
        "/positions - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n"
        "/report - –û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é\n"
        "/params - –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
        "/analytics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ winrate –∏ PnL\n"
        "/signals - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "/mode - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ/—Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∏—Å–∫–∞\n"
        "/mode_safe - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—â–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º (SAFE)\n"
        "/mode_normal - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º (NORMAL)\n"
        "/mode_aggressive - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (AGGRESSIVE)\n"
        "/logs - –°–∫–∞—á–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ä–∏—Å–∫–∞:\n"
        f"{modes_info}"
    )
    await send_reply(update, context, commands)


async def balance_command(update: Update, context: CallbackContext):
    try:
        balance = binance.fetch_balance()
        usdt_balance = balance['total'].get('USDT', 0)
        await send_reply(update, context, f"üí∞ –ë–∞–ª–∞–Ω—Å: {usdt_balance} USDT")
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")


async def price_command(update: Update, context: CallbackContext):
    try:
        if len(context.args) == 0:
            symbol = "BTC/USDT"
        elif len(context.args) == 1:
            symbol = context.args[0].upper() + "/USDT"
        else:
            base = context.args[0].upper()
            quote = context.args[1].upper()
            symbol = f"{base}/{quote}"

        ticker = binance.fetch_ticker(symbol)
        price = ticker.get('last', 'N/A')
        await send_reply(update, context, f"üìä {symbol}: {price}")
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")


async def analyze_command(update: Update, context: CallbackContext):
    global last_analyze_time, last_analyze_result
    try:
        now = time.time()
        if now - last_analyze_time > ANALYZE_CACHE_TIME:
            last_analyze_result = analyze_market_smart()
            last_analyze_time = now
        await send_reply(update, context, last_analyze_result)
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")


async def status_command(update: Update, context: CallbackContext):
    try:
        status = "–í–ö–õ" if auto_trader.AUTO_TRADING_ENABLED else "–í–´–ö–õ"
        balance = binance.fetch_balance()
        usdt_balance = balance['total'].get('USDT', 0)
        positions_count = len(futures_manager.active_positions)
        risk_status = risk_modes.get_risk_mode()

        try:
            volatile, reason = risk_manager.is_market_volatile("BTC/USDT")
            vol_status = "–í–´–°–û–ö–ê–Ø" if volatile else "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è"
            vol_text = f"\n–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {vol_status}"
            if volatile and reason:
                vol_text += f" ({reason})"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            vol_text = "\n–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"

        text = (
            f"üî¥ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ {status}\n"
            f"{risk_status}\n"
            f"–ë–∞–ª–∞–Ω—Å: {usdt_balance:.2f} USDT\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {positions_count}"
            f"{vol_text}"
        )
        await send_reply(update, context, text)
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")


async def auto_command_handler(update: Update, context: CallbackContext):
    auto_trader.AUTO_TRADING_ENABLED = not auto_trader.AUTO_TRADING_ENABLED
    status = "–≤–∫–ª—é—á–µ–Ω" if auto_trader.AUTO_TRADING_ENABLED else "–≤—ã–∫–ª—é—á–µ–Ω"
    await send_reply(update, context, f"–ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ {status}.")


async def positions_command(update: Update, context: CallbackContext):
    if futures_manager.active_positions:
        text = f"üìå –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ ({len(futures_manager.active_positions)}):\n"
        for pid, pos in futures_manager.active_positions.items():
            text += (
                f"- {pos['symbol']} | {pos['side']} | "
                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos['entry_price']} | "
                f"–ö–æ–ª-–≤–æ: {pos['amount']}\n"
            )
    else:
        text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π."
    await send_reply(update, context, text)


async def report_command(update: Update, context: CallbackContext):
    try:
        report_text = get_portfolio_status()
        await send_reply(update, context, report_text)
        logger.info(f"[REPORT] –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {report_text}")
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {e}")


async def params_command(update: Update, context: CallbackContext):
    try:
        text = parameters_report()
        await send_reply(update, context, text)
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")


async def analytics_command(update: Update, context: CallbackContext):
    try:
        text = history_report_text()
        await send_reply(update, context, text)
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")


async def signals_command(update: Update, context: CallbackContext):
    try:
        log_file = os.path.join("logs", "signals_history.log")
        if not os.path.exists(log_file):
            await send_reply(update, context, "‚ö† –ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–∞.")
            return
        with open(log_file, "r", encoding="utf-8") as f:
            lines = f.readlines()[-10:]
        text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã:\n" + "".join(lines)
        await send_reply(update, context, text)
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")


# === –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∏—Å–∫–∞ ===
async def mode_command(update: Update, context: CallbackContext):
    text = risk_modes.toggle_auto_mode()
    await send_reply(update, context, text)


async def mode_safe_command(update: Update, context: CallbackContext):
    success, msg = risk_modes.set_risk_mode("SAFE")
    await send_reply(update, context, msg)


async def mode_normal_command(update: Update, context: CallbackContext):
    success, msg = risk_modes.set_risk_mode("NORMAL")
    await send_reply(update, context, msg)


async def mode_aggressive_command(update: Update, context: CallbackContext):
    success, msg = risk_modes.set_risk_mode("AGGRESSIVE")
    await send_reply(update, context, msg)


async def logs_command(update: Update, context: CallbackContext):
    try:
        zip_path = "logs_archive.zip"
        shutil.make_archive("logs_archive", 'zip', "logs")
        await update.message.reply_document(open(zip_path, "rb"))
        os.remove(zip_path)
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ª–æ–≥–æ–≤: {e}")


def setup_telegram_bot():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("balance", balance_command))
    app.add_handler(CommandHandler("price", price_command))
    app.add_handler(CommandHandler("analyze", analyze_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("auto", auto_command_handler))
    app.add_handler(CommandHandler("positions", positions_command))
    app.add_handler(CommandHandler("report", report_command))
    app.add_handler(CommandHandler("params", params_command))
    app.add_handler(CommandHandler("analytics", analytics_command))
    app.add_handler(CommandHandler("signals", signals_command))
    app.add_handler(CommandHandler("mode", mode_command))
    app.add_handler(CommandHandler("mode_safe", mode_safe_command))
    app.add_handler(CommandHandler("mode_normal", mode_normal_command))
    app.add_handler(CommandHandler("mode_aggressive", mode_aggressive_command))
    app.add_handler(CommandHandler("logs", logs_command))
    return app
