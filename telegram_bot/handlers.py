import logging
import time
import shutil
import os
from telegram import Update
from telegram.ext import CommandHandler, CallbackContext, Application
from config import TELEGRAM_TOKEN, binance
from core.portfolio import get_portfolio_status
from core.strategy import analyze_market_smart
from core.order_manager import auto_command
from utils.safe_send import safe_send_message

logger = logging.getLogger(__name__)

# ====== –ö—ç—à –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /analyze ======
last_analyze_time = 0
last_analyze_result = "‚ùå –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã."
ANALYZE_CACHE_TIME = 60  # 1 –º–∏–Ω—É—Ç–∞

# ====== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ ======
async def send_reply(update: Update, context: CallbackContext, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        logger.info(f"COMMAND | {update.message.text}")
        await safe_send_message(context.bot, update.effective_chat.id, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ====== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ======
async def start_command(update: Update, context: CallbackContext):
    await send_reply(update, context, "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: CallbackContext):
    commands = (
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/price <symbol> [quote] - –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã\n"
        "/analyze - –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∞\n"
        "/auto - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç—Ä–µ–π–¥\n"
        "/report - –û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é\n"
        "/logs - –°–∫–∞—á–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏"
    )
    await send_reply(update, context, commands)

async def balance_command(update: Update, context: CallbackContext):
    try:
        balance = binance.fetch_balance()
        usdt_balance = balance['total'].get('USDT', 0)
        await send_reply(update, context, f"üí∞ –ë–∞–ª–∞–Ω—Å: {usdt_balance} USDT")
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

async def price_command(update: Update, context: CallbackContext):
    try:
        if len(context.args) == 0:
            symbol = "BTC/USDT"
        elif len(context.args) == 1:
            symbol = context.args[0].upper() + "/USDT"
        else:
            base = context.args[0].upper()
            quote = context.args[1].upper()
            symbol = f"{base}/{quote}"

        ticker = binance.fetch_ticker(symbol)
        price = ticker.get('last', 'N/A')
        await send_reply(update, context, f"üìä {symbol}: {price}")
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")

async def analyze_command(update: Update, context: CallbackContext):
    global last_analyze_time, last_analyze_result
    try:
        now = time.time()
        if now - last_analyze_time > ANALYZE_CACHE_TIME:
            last_analyze_result = analyze_market_smart()
            last_analyze_time = now
        await send_reply(update, context, last_analyze_result)
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

async def status_command(update: Update, context: CallbackContext):
    await send_reply(update, context, "üî¥ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –í–ö–õ\n–†–∏—Å–∫: 2.0%\n–ë–∞–ª–∞–Ω—Å: 0 USDT")

async def auto_command_handler(update: Update, context: CallbackContext):
    try:
        result = await auto_command()
        await send_reply(update, context, result)
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–∫–æ–º–∞–Ω–¥—ã: {e}")

async def report_command(update: Update, context: CallbackContext):
    try:
        report = get_portfolio_status()
        await send_reply(update, context, report)
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {e}")

async def logs_command(update: Update, context: CallbackContext):
    try:
        zip_path = "logs_archive.zip"
        shutil.make_archive("logs_archive", 'zip', "logs")
        await update.message.reply_document(open(zip_path, "rb"))
        os.remove(zip_path)
    except Exception as e:
        await send_reply(update, context, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ª–æ–≥–æ–≤: {e}")

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ==========
def setup_telegram_bot():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("balance", balance_command))
    app.add_handler(CommandHandler("price", price_command))
    app.add_handler(CommandHandler("analyze", analyze_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("auto", auto_command_handler))
    app.add_handler(CommandHandler("report", report_command))
    app.add_handler(CommandHandler("logs", logs_command))

    return app
