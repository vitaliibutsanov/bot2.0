import logging
from telegram import Update
from telegram.ext import CommandHandler, CallbackContext, Application
from config import TELEGRAM_TOKEN, CHAT_ID, binance  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from core.portfolio import get_portfolio_status
from core.strategy import analyze_market_smart
from core.order_manager import auto_command

logger = logging.getLogger(__name__)


# ====== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ======

async def start_command(update: Update, context: CallbackContext):
    await update.message.reply_text("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


async def help_command(update: Update, context: CallbackContext):
    commands = (
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/price <symbol> [quote] - –¶–µ–Ω–∞ –º–æ–Ω–µ—Ç—ã\n"
        "/analyze - –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∞\n"
        "/auto - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ç—Ä–µ–π–¥\n"
        "/report - –û—Ç—á–µ—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é"
    )
    await update.message.reply_text(commands)


async def balance_command(update: Update, context: CallbackContext):
    try:
        balance = binance.fetch_balance()
        usdt_balance = balance['total'].get('USDT', 0)
        await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {usdt_balance} USDT")
    except Exception as e:
        await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞: {e}")


async def price_command(update: Update, context: CallbackContext):
    try:
        if len(context.args) == 0:
            symbol = "BTC/USDT"
        elif len(context.args) == 1:
            symbol = context.args[0].upper() + "/USDT"
        else:
            base = context.args[0].upper()
            quote = context.args[1].upper()
            symbol = f"{base}/{quote}"

        ticker = binance.fetch_ticker(symbol)
        price = ticker['last']
        await update.message.reply_text(f"üìä {symbol}: {price}")
    except Exception as e:
        await update.message.reply_text(f"‚ö† –û—à–∏–±–∫–∞: {e}")


async def analyze_command(update: Update, context: CallbackContext):
    result = analyze_market_smart()
    await update.message.reply_text(result)


async def status_command(update: Update, context: CallbackContext):
    await update.message.reply_text("üî¥ –ê–≤—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –í–ö–õ\n–†–∏—Å–∫: 2.0%\n–ë–∞–ª–∞–Ω—Å: 0 USDT")



async def auto_command_handler(update: Update, context: CallbackContext):
    result = await auto_command()
    await update.message.reply_text(result)


async def report_command(update: Update, context: CallbackContext):
    report = get_portfolio_status()
    await update.message.reply_text(report)


# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ==========
def setup_telegram_bot():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("balance", balance_command))
    app.add_handler(CommandHandler("price", price_command))
    app.add_handler(CommandHandler("analyze", analyze_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("auto", auto_command_handler))
    app.add_handler(CommandHandler("report", report_command))

    return app
