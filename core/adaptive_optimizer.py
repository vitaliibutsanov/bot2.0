import os
import time
import logging
from core.history_analyzer import analyze_history

ANALYTICS_LOG = os.path.join("logs", "analytics.log")

# –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
RSI_BUY = 40
RSI_SELL = 60
TP_PERCENT = 0.011  # 1.1%
SL_PERCENT = 0.05   # 5%

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
MIN_RSI = 25
MAX_RSI = 75
MIN_TP = 0.005  # 0.5%
MAX_TP = 0.03   # 3%
MIN_SL = 0.02   # 2%
MAX_SL = 0.1    # 10%

# –®–∞–≥–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
STEP_TP = 0.001
STEP_SL = 0.005
STEP_RSI = 1

def log_analytics(message: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ analytics.log"""
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    with open(ANALYTICS_LOG, "a", encoding="utf-8") as f:
        f.write(f"{timestamp} | {message}\n")

def adaptive_optimize():
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç RSI_BUY, RSI_SELL, TP_PERCENT, SL_PERCENT
    –Ω–∞ –æ—Å–Ω–æ–≤–µ winrate –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ PnL –∏–∑ history_analyzer.
    """
    global RSI_BUY, RSI_SELL, TP_PERCENT, SL_PERCENT

    try:
        total, wins, winrate, avg_pnl, max_win, max_loss = analyze_history()
    except Exception as e:
        log_analytics(f"ANALYZE_ERROR | {e}")
        return

    if total < 10:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        log_analytics("NO DATA: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.")
        return

    log_analytics(f"START OPTIMIZATION | Trades={total} | Wins={wins} | Winrate={winrate}% | AvgPnL={avg_pnl:.2f} | MaxWin={max_win:.2f} | MaxLoss={max_loss:.2f}")

    # --- –õ–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ ---
    if winrate < 40 or avg_pnl < 0:  # –Ω–∏–∑–∫–∏–π winrate –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π PnL
        SL_PERCENT = min(SL_PERCENT + STEP_SL, MAX_SL)
        TP_PERCENT = max(TP_PERCENT - STEP_TP, MIN_TP)
        RSI_BUY = min(RSI_BUY + STEP_RSI, MAX_RSI)
        RSI_SELL = max(RSI_SELL - STEP_RSI, MIN_RSI)
        log_analytics(f"WINRATE LOW: TP={TP_PERCENT:.4f}, SL={SL_PERCENT:.4f}, RSI_BUY={RSI_BUY}, RSI_SELL={RSI_SELL}")

    elif winrate > 60 and avg_pnl > 0:  # –≤—ã—Å–æ–∫–∏–π winrate –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π PnL
        SL_PERCENT = max(SL_PERCENT - STEP_SL, MIN_SL)
        TP_PERCENT = min(TP_PERCENT + STEP_TP, MAX_TP)
        RSI_BUY = max(RSI_BUY - STEP_RSI, MIN_RSI)
        RSI_SELL = min(RSI_SELL + STEP_RSI, MAX_RSI)
        log_analytics(f"WINRATE HIGH: TP={TP_PERCENT:.4f}, SL={SL_PERCENT:.4f}, RSI_BUY={RSI_BUY}, RSI_SELL={RSI_SELL}")

    else:
        log_analytics("NO CHANGE: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    # --- –î–æ–ø. –º–µ—Ç—Ä–∏–∫–∞: –µ—Å–ª–∏ MaxLoss >> MaxWin ---
    if abs(max_loss) > abs(max_win) * 1.5:
        SL_PERCENT = min(SL_PERCENT + STEP_SL, MAX_SL)
        log_analytics(f"LOSS_ADJUST: –£–≤–µ–ª–∏—á–µ–Ω SL –∏–∑-–∑–∞ –±–æ–ª—å—à–∏—Ö –ø—Ä–æ—Å–∞–¥–æ–∫ | SL={SL_PERCENT:.4f}")

    # --- –î–æ–ø. –º–µ—Ç—Ä–∏–∫–∞: –µ—Å–ª–∏ winrate —Å—Ç–∞–±–∏–ª–µ–Ω, –Ω–æ PnL –º–∞–ª–µ–Ω—å–∫–∏–π ---
    if 45 <= winrate <= 55 and 0 < avg_pnl < 0.1:
        TP_PERCENT = min(TP_PERCENT + STEP_TP, MAX_TP)
        log_analytics(f"TP_BOOST: –£–≤–µ–ª–∏—á–µ–Ω TP –¥–ª—è —Ä–æ—Å—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ | TP={TP_PERCENT:.4f}")


def get_current_parameters():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
    return {
        "RSI_BUY": RSI_BUY,
        "RSI_SELL": RSI_SELL,
        "TP_PERCENT": TP_PERCENT,
        "SL_PERCENT": SL_PERCENT
    }

def parameters_report():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è Telegram-–±–æ—Ç–∞."""
    params = get_current_parameters()
    return (f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n"
            f"‚Ä¢ RSI Buy: {params['RSI_BUY']}\n"
            f"‚Ä¢ RSI Sell: {params['RSI_SELL']}\n"
            f"‚Ä¢ TP: {params['TP_PERCENT'] * 100:.2f}%\n"
            f"‚Ä¢ SL: {params['SL_PERCENT'] * 100:.2f}%")
