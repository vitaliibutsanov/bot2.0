from core.adaptive_strategy import get_adaptive_signal, register_trade
from core.order_manager import futures_manager
from core.portfolio import virtual_portfolio
from config import CHAT_ID
import logging

async def auto_trade_cycle(context):
    symbol = "BTC/USDT"
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
        signal = get_adaptive_signal(symbol)
        message = None

        # ===== –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ =====
        if "–ü–û–ö–£–ü–ê–¢–¨" in signal:
            amount = 0.01  # –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä—ë–º
            price = futures_manager.get_current_price(symbol)
            success, order = await futures_manager.open_position(symbol, "BUY", amount)
            if success:
                register_trade()
                message = f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è BUY {amount} {symbol} @ {price}"
            else:
                message = f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {order}"

        # ===== –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ =====
        elif "–ü–†–û–î–ê–í–ê–¢–¨" in signal and futures_manager.active_positions:
            pid = next(iter(futures_manager.active_positions))
            success, msg = await futures_manager.close_position(pid)
            price = futures_manager.get_current_price(symbol)
            if success:
                register_trade()
                profit = (price - futures_manager.active_positions[pid]['entry_price']) \
                         * futures_manager.active_positions[pid]['amount']
                virtual_portfolio.update_balance(profit)
                message = f"üî¥ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol} @ {price}\n–ü—Ä–∏–±—ã–ª—å: {profit:.2f} USDT"
            else:
                message = f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {msg}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–¥–µ–ª–∫–∞—Ö
        if message:
            await context.bot.send_message(chat_id=CHAT_ID, text=message)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ auto_trade_cycle: {e}")
        await context.bot.send_message(chat_id=CHAT_ID, text=f"‚ö† –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∞: {e}")
