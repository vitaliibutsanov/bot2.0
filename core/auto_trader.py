import logging
from core.order_manager import futures_manager
from core.strategy import analyze_market_smart
from core.binance_api import get_binance_balance
from core.portfolio import virtual_portfolio
from config import CHAT_ID, binance, RISK_PER_TRADE

logger = logging.getLogger(__name__)

async def auto_trade_cycle(context):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∞."""
    try:
        symbol = "BTC/USDT"
        signal = analyze_market_smart(symbol)
        price = binance.fetch_ticker(symbol)['last']
        balance = get_binance_balance()

        amount = round((balance['USDT'] * RISK_PER_TRADE) / price, 6)
        message = f"üîç –ê–Ω–∞–ª–∏–∑: {symbol}\n–¶–µ–Ω–∞: {price}\n–°–∏–≥–Ω–∞–ª: {signal}"

        # ====== –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ======
        if "–ü–û–ö–£–ü–ê–¢–¨" in signal:
            success, order = await futures_manager.open_position(
                symbol=symbol, side='BUY', amount=amount
            )
            if success:
                message = f"üìà –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è BUY {amount} {symbol} @ {price}"
            else:
                message = f"‚ö† –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {order}"

        # ====== –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ======
        elif "–ü–†–û–î–ê–í–ê–¢–¨" in signal and futures_manager.active_positions:
            pid = next(iter(futures_manager.active_positions))
            success, msg = await futures_manager.close_position(pid)
            if success:
                profit = (price - futures_manager.active_positions[pid]['entry_price']) * futures_manager.active_positions[pid]['amount']
                virtual_portfolio.update_balance(profit)
                message = f"üìâ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol} @ {price}\n–ü—Ä–∏–±—ã–ª—å: {profit:.2f} USDT"
            else:
                message = f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {msg}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
        await context.bot.send_message(chat_id=CHAT_ID, text=message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ auto_trade_cycle: {e}")
        await context.bot.send_message(chat_id=CHAT_ID, text=f"‚ö† –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–∞: {e}")
