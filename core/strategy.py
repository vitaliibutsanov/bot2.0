import time 
import pandas as pd
import ta
from ta.volatility import BollingerBands, AverageTrueRange
from ta.trend import EMAIndicator
from config import binance, ATR_THRESHOLD
from log_config import signals_logger  # –õ–æ–≥–≥–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤

# –ö—ç—à –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
_last_signal = None
_last_signal_time = 0
SIGNAL_CACHE_TIME = 60  # 60 —Å–µ–∫—É–Ω–¥


def get_technical_indicators(symbol: str, timeframe='1m', limit=50):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: —Ü–µ–Ω–∞, RSI, Bollinger Bands, –æ–±—ä—ë–º."""
    try:
        ohlcv = binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        closes = [c[4] for c in ohlcv]
        volumes = [c[5] for c in ohlcv]

        if len(closes) < 20:
            return None, None, None, None, None

        rsi = ta.momentum.rsi(pd.Series(closes), window=14).iloc[-1]
        bb = BollingerBands(pd.Series(closes), window=20, window_dev=2)
        bb_high = bb.bollinger_hband().iloc[-1]
        bb_low = bb.bollinger_lband().iloc[-1]

        return closes[-1], round(rsi, 2), round(bb_high, 2), round(bb_low, 2), round(volumes[-1], 3)
    except Exception as e:
        signals_logger.error(f"TECHNICAL_INDICATORS_ERROR | {e}")
        return None, None, None, None, None


def analyze_market_smart(symbol='BTC/USDT', timeframe='1h', limit=50):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:
    - RSI + Bollinger Bands
    - EMA (20)
    - ATR (14)
    - –î–∏—Å–±–∞–ª–∞–Ω—Å —Å—Ç–∞–∫–∞–Ω–∞
    - –°–∏—Å—Ç–µ–º–∞ –¥–æ–≤–µ—Ä–∏—è (confidence)
    """
    global _last_signal, _last_signal_time

    try:
        price, rsi, bb_upper, bb_lower, volume = get_technical_indicators(symbol)
        if price is None:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã."

        # EMA
        closes = [c[4] for c in binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)]
        ema = EMAIndicator(pd.Series(closes), window=20).ema_indicator().iloc[-1]

        # ATR
        df = pd.DataFrame(
            binance.fetch_ohlcv(symbol, timeframe=timeframe, limit=20),
            columns=['time', 'open', 'high', 'low', 'close', 'volume']
        )
        atr = AverageTrueRange(high=df['high'], low=df['low'], close=df['close'], window=14).average_true_range().iloc[-1]

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Å–æ–∫–∏–π ATR (–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫) ===
        if atr > ATR_THRESHOLD:
            signals_logger.warning(f"TRADE_BLOCKED | ATR={atr:.3f} > {ATR_THRESHOLD} (–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫)")
            return f"‚ö† –†—ã–Ω–æ–∫ —Å–ª–∏—à–∫–æ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π (ATR={atr:.2f}) ‚Äî —Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."

        # –ü–æ–∑–∏—Ü–∏—è —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Bollinger Bands
        price_position = "üîπ –¶–µ–Ω–∞ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ BB"
        if price <= bb_lower:
            price_position = "üü¢ –¶–µ–Ω–∞ —É –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"
        elif price >= bb_upper:
            price_position = "üî¥ –¶–µ–Ω–∞ —É –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã BB"

        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–∫–∞–Ω–∞
        try:
            orderbook = binance.fetch_order_book(symbol, limit=10)
            bid_volume = sum([b[1] for b in orderbook.get('bids', [])[:3]])
            ask_volume = sum([a[1] for a in orderbook.get('asks', [])[:3]])
            imbalance = (bid_volume - ask_volume) / max(bid_volume + ask_volume, 1)
        except Exception:
            bid_volume, ask_volume, imbalance = 0, 0, 0

        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–≤–µ—Ä–∏—è
        confidence = 0
        rsi_buy_level = 40
        rsi_sell_level = 60

        if rsi < rsi_buy_level:
            confidence += 1
        if price <= bb_lower:
            confidence += 1
        if imbalance > 0.15:
            confidence += 1
        if price > ema:
            confidence += 1
        if atr > 0:
            confidence += 1

        # –°–∏–≥–Ω–∞–ª
        signal = "‚ùï –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞"
        if confidence >= 3 and rsi < rsi_buy_level:
            signal = "üìà –°–ò–ì–ù–ê–õ: –ü–û–ö–£–ü–ê–¢–¨"
        elif confidence >= 3 and rsi > rsi_sell_level:
            signal = "üìâ –°–ò–ì–ù–ê–õ: –ü–†–û–î–ê–í–ê–¢–¨"
        else:
            if rsi > 50 and price > ema:
                signal = "üìà –°–õ–ê–ë–´–ô –°–ò–ì–ù–ê–õ: —Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö (EMA)"
            elif rsi < 50 and price < ema:
                signal = "üìâ –°–õ–ê–ë–´–ô –°–ò–ì–ù–ê–õ: —Ç—Ä–µ–Ω–¥ –≤–Ω–∏–∑ (EMA)"

        # === –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ ===
        now = time.time()
        if signal == _last_signal and (now - _last_signal_time < SIGNAL_CACHE_TIME):
            return signal
        _last_signal = signal
        _last_signal_time = now

        # –õ–æ–≥ –≤ —Ñ–∞–π–ª (–±–µ–∑ —Å–ø–∞–º–∞ –≤ –∫–æ–Ω—Å–æ–ª—å)
        signals_logger.info(
            f"ANALYZE_SMART | {symbol} | Price={price:.2f} | RSI={rsi:.2f} | "
            f"BB=({bb_lower:.2f}/{bb_upper:.2f}) | EMA={ema:.2f} | ATR={atr:.2f} | "
            f"Bid={bid_volume:.2f} Ask={ask_volume:.2f} | Conf={confidence} | {signal}"
        )

        return (
            f"{signal}\n{price_position}\n"
            f"üìâ RSI: {rsi:.2f}\n"
            f"üìè EMA: {ema:.2f}\n"
            f"‚ö° ATR: {atr:.2f}\n"
            f"üìä –û–±—ä—ë–º: {volume:.2f}\n"
            f"üåü –î–æ–≤–µ—Ä–∏–µ: {confidence}/5"
        )
    except Exception as e:
        signals_logger.error(f"ANALYZE_SMART_ERROR | {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
