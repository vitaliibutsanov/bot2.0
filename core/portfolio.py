import logging
from datetime import datetime, timedelta
import os
import json
from core.risk_manager import risk_manager  # –°–≤—è–∑—å —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–∏—Å–∫–æ–≤
from config import binance  # –ß—Ç–æ–±—ã –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

PORTFOLIO_FILE = "logs/portfolio.json"


class VirtualPortfolio:
    def __init__(self, initial_balance=1000):
        self.initial_balance = initial_balance
        self.balance = initial_balance
        self.history = []  # [(datetime, pnl_usdt, type)]
        self.buy_count = 0
        self.sell_count = 0
        self._load_portfolio()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º risk_manager —Å—Ç–∞—Ä—Ç–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        if risk_manager.balance_start is None:
            risk_manager.balance_start = self.balance

    def _save_portfolio(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ —Ñ–∞–π–ª."""
        try:
            os.makedirs("logs", exist_ok=True)
            data = {
                "initial_balance": self.initial_balance,
                "balance": self.balance,
                "buy_count": self.buy_count,
                "sell_count": self.sell_count,
                "history": [
                    {"time": t.isoformat(), "pnl": pnl, "type": trade_type}
                    for (t, pnl, trade_type) in self.history
                ],
            }
            with open(PORTFOLIO_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"PORTFOLIO_SAVE_ERROR | {e}")

    def _load_portfolio(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π."""
        try:
            if os.path.exists(PORTFOLIO_FILE):
                with open(PORTFOLIO_FILE, "r", encoding="utf-8") as f:
                    data = json.load(f)
                self.initial_balance = data.get("initial_balance", self.initial_balance)
                self.balance = data.get("balance", self.initial_balance)
                self.buy_count = data.get("buy_count", 0)
                self.sell_count = data.get("sell_count", 0)
                self.history = [
                    (
                        datetime.fromisoformat(item["time"]),
                        item["pnl"],
                        item["type"],
                    )
                    for item in data.get("history", [])
                ]
                logging.info(f"[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å. –ë–∞–ª–∞–Ω—Å: {self.balance:.2f} USDT")

            # --- –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° BINANCE ---
            self._sync_with_binance_balance()

        except Exception as e:
            logging.error(f"PORTFOLIO_LOAD_ERROR | {e}")
            self._reset_portfolio()

    def _sync_with_binance_balance(self):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º Binance –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏ –±–æ–ª—å—à–æ–π —Ä–∞–∑–Ω–∏—Ü–µ."""
        try:
            real_balance = binance.fetch_balance().get("total", {}).get("USDT", self.balance)
            if abs(real_balance - self.balance) > self.balance * 0.1:  # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª–µ–µ 10%
                logging.warning(
                    f"[SYNC] –ë–∞–ª–∞–Ω—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è ({self.balance:.2f}) "
                    f"–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Binance ({real_balance:.2f}). –û–±–Ω–æ–≤–ª—è–µ–º..."
                )
                self.balance = real_balance
                risk_manager.balance_start = self.balance
                self._save_portfolio()
        except Exception as e:
            logging.error(f"BINANCE_SYNC_ERROR | {e}")

    def _reset_portfolio(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        self.balance = self.initial_balance
        self.history = []
        self.buy_count = 0
        self.sell_count = 0
        risk_manager.balance_start = self.balance
        self._save_portfolio()
        logging.warning("[RESET] –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å–±—Ä–æ—à–µ–Ω.")

    def apply_trade(self, pnl_usdt, trade_type="SELL"):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é.
        pnl_usdt ‚Äî –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –≤ USDT (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º).
        """
        self.balance += pnl_usdt
        self.history.append((datetime.now(), pnl_usdt, trade_type))

        if trade_type == "BUY":
            self.buy_count += 1
        elif trade_type == "SELL":
            self.sell_count += 1

        logging.info(
            f"VIRTUAL_PNL | {trade_type} | {pnl_usdt:.2f} USDT | Balance={self.balance:.2f} USDT"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ risk_manager
        risk_manager.balance_start = self.balance

        self._save_portfolio()

    def calculate_report(self, days: int):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PnL –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π."""
        cutoff = datetime.now() - timedelta(days=days)
        pnl_sum = sum(p for (t, p, _) in self.history if t >= cutoff)
        percent = (pnl_sum / self.initial_balance) * 100 if self.initial_balance > 0 else 0
        return pnl_sum, percent

    def full_report(self):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é."""
        d, dp = self.calculate_report(1)
        w, wp = self.calculate_report(7)
        m, mp = self.calculate_report(30)
        return (
            f"üìä –û—Ç—á—ë—Ç –ø–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é:\n"
            f"–ë–∞–ª–∞–Ω—Å: {self.balance:.2f} USDT\n"
            f"–°–¥–µ–ª–æ–∫: {self.buy_count + self.sell_count} "
            f"(BUY: {self.buy_count} | SELL: {self.sell_count})\n"
            f"24—á: {d:.2f} USDT ({dp:.2f}%)\n"
            f"7–¥: {w:.2f} USDT ({wp:.2f}%)\n"
            f"30–¥: {m:.2f} USDT ({mp:.2f}%)"
        )


virtual_portfolio = VirtualPortfolio(1000)


def get_portfolio_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –æ—Ç—á—ë—Ç –ø–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é."""
    return virtual_portfolio.full_report()
