import time
import logging
import pandas as pd
from ta.trend import EMAIndicator
from core.strategy import analyze_market_smart, get_technical_indicators
from config import binance

# –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
last_trade_time = 0
NO_TRADE_LIMIT_1 = 3 * 3600  # 3 —á–∞—Å–∞
NO_TRADE_LIMIT_2 = 6 * 3600  # 6 —á–∞—Å–æ–≤


def register_trade():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏."""
    global last_trade_time
    last_trade_time = time.time()
    logging.info("ADAPTIVE_STRATEGY | –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞.")


def get_adaptive_signal(symbol="BTC/USDT"):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª —Å —É—á–µ—Ç–æ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
    - –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ analyze_market_smart().
    - –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç –¥–æ–ª–≥–æ, –æ—Å–ª–∞–±–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (RSI).
    - –ï—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç > 6 —á–∞—Å–æ–≤, –≤–∫–ª—é—á–∞–µ–º fallback EMA —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
    """
    global last_trade_time
    time_since_trade = time.time() - last_trade_time if last_trade_time > 0 else 999999

    # 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    try:
        result = analyze_market_smart(symbol)
        if "–°–ò–ì–ù–ê–õ" in result:
            return result
    except Exception as e:
        logging.error(f"ADAPTIVE_STRATEGY_ERROR (SMART): {e}")

    # 2. –ï—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç > 3 —á–∞—Å–æ–≤ ‚Äî –æ—Å–ª–∞–±–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã RSI
    if time_since_trade > NO_TRADE_LIMIT_1:
        try:
            price, rsi, bb_upper, bb_lower, volume = get_technical_indicators(symbol)
            if price and rsi is not None and (rsi < 45 or rsi > 55):  # –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —É—Ä–æ–≤–Ω–∏
                logging.info(f"ADAPTIVE_STRATEGY | –ú—è–≥–∫–∏–π —Å–∏–≥–Ω–∞–ª –ø–æ RSI={rsi:.2f}")
                return f"‚ö† –ú–Ø–ì–ö–ò–ô –°–ò–ì–ù–ê–õ (RSI={rsi:.2f})\n–¶–µ–Ω–∞: {price:.2f}"
        except Exception as e:
            logging.error(f"ADAPTIVE_STRATEGY_ERROR (RSI): {e}")

    # 3. –ï—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç > 6 —á–∞—Å–æ–≤ ‚Äî EMA fallback
    if time_since_trade > NO_TRADE_LIMIT_2:
        try:
            ohlcv = binance.fetch_ohlcv(symbol, timeframe="15m", limit=50)
            closes = [c[4] for c in ohlcv if c[4] is not None]

            if len(closes) < 30:
                logging.warning("ADAPTIVE_STRATEGY | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA –∞–Ω–∞–ª–∏–∑–∞.")
                return "‚ùï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA fallback."

            ema_fast = EMAIndicator(pd.Series(closes), window=10).ema_indicator().iloc[-1]
            ema_slow = EMAIndicator(pd.Series(closes), window=30).ema_indicator().iloc[-1]
            price = closes[-1]

            if ema_fast > ema_slow:
                logging.info(f"ADAPTIVE_STRATEGY | EMA BUY (fast={ema_fast}, slow={ema_slow})")
                return f"üìà EMA-–°–ò–ì–ù–ê–õ: –ü–û–ö–£–ü–ê–¢–¨ (fast={ema_fast:.2f}, slow={ema_slow:.2f})"
            elif ema_fast < ema_slow:
                logging.info(f"ADAPTIVE_STRATEGY | EMA SELL (fast={ema_fast}, slow={ema_slow})")
                return f"üìâ EMA-–°–ò–ì–ù–ê–õ: –ü–†–û–î–ê–í–ê–¢–¨ (fast={ema_fast:.2f}, slow={ema_slow:.2f})"
        except Exception as e:
            logging.error(f"ADAPTIVE_STRATEGY_ERROR (EMA): {e}")

    return "‚ùï –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)"
