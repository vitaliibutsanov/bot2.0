import time
import logging
import pandas as pd
from ta.trend import EMAIndicator
from core.strategy import analyze_market_smart, get_technical_indicators
from config import binance
from log_config import signals_logger

# –¢–∞–π–º–µ—Ä—ã –∏ –∫—ç—à
last_trade_time = 0
last_adaptive_signal = None
last_signal_time = 0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SIGNAL_CACHE_TIME = 60  # –∫—ç—à —Å–∏–≥–Ω–∞–ª–∞ 1 –º–∏–Ω—É—Ç–∞
NO_TRADE_LIMIT_1 = 3 * 3600  # 3 —á–∞—Å–∞
NO_TRADE_LIMIT_2 = 6 * 3600  # 6 —á–∞—Å–æ–≤
VERBOSE_ADAPTIVE = False  # –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥?


def register_trade():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏."""
    global last_trade_time
    last_trade_time = time.time()
    signals_logger.info("ADAPTIVE_STRATEGY | –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞.")


def get_adaptive_signal(symbol="BTC/USDT"):
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:
    1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç analyze_market_smart().
    2. –ï—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç > 3—á ‚Äî –æ—Å–ª–∞–±–ª—è–µ—Ç RSI-—Ñ–∏–ª—å—Ç—Ä—ã.
    3. –ï—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç > 6—á ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç EMA fallback.
    """
    global last_trade_time, last_adaptive_signal, last_signal_time

    now = time.time()

    # –í–æ–∑–≤—Ä–∞—Ç –∫—ç—à–∞ —Å–∏–≥–Ω–∞–ª–∞
    if last_adaptive_signal and (now - last_signal_time < SIGNAL_CACHE_TIME):
        return last_adaptive_signal

    time_since_trade = now - last_trade_time if last_trade_time > 0 else 999999

    # === 1. Smart-–∞–Ω–∞–ª–∏–∑
    try:
        result = analyze_market_smart(symbol)
        if "–°–ò–ì–ù–ê–õ" in result:
            last_adaptive_signal = result
            last_signal_time = now
            return result
    except Exception as e:
        logging.error(f"ADAPTIVE_STRATEGY_ERROR (SMART): {e}")

    # === 2. –ú—è–≥–∫–∏–π RSI (–µ—Å–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫)
    if time_since_trade > NO_TRADE_LIMIT_1:
        try:
            price, rsi, bb_upper, bb_lower, volume = get_technical_indicators(symbol)
            if price and rsi is not None and (rsi < 45 or rsi > 55):
                msg = f"‚ö† –ú–Ø–ì–ö–ò–ô –°–ò–ì–ù–ê–õ (RSI={rsi:.2f})\n–¶–µ–Ω–∞: {price:.2f}"
                if VERBOSE_ADAPTIVE:
                    signals_logger.info(f"ADAPTIVE_STRATEGY | –ú—è–≥–∫–∏–π —Å–∏–≥–Ω–∞–ª (RSI={rsi:.2f})")
                last_adaptive_signal = msg
                last_signal_time = now
                return msg
        except Exception as e:
            logging.error(f"ADAPTIVE_STRATEGY_ERROR (RSI): {e}")

    # === 3. EMA fallback (–µ—Å–ª–∏ —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç > 6—á)
    if time_since_trade > NO_TRADE_LIMIT_2:
        try:
            ohlcv = binance.fetch_ohlcv(symbol, timeframe="15m", limit=50)
            closes = [c[4] for c in ohlcv if c and c[4] is not None]

            if len(closes) < 30:
                msg = "‚ùï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA fallback."
                signals_logger.warning("ADAPTIVE_STRATEGY | –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMA –∞–Ω–∞–ª–∏–∑–∞.")
                last_adaptive_signal = msg
                last_signal_time = now
                return msg

            ema_fast = EMAIndicator(pd.Series(closes), window=10).ema_indicator().iloc[-1]
            ema_slow = EMAIndicator(pd.Series(closes), window=30).ema_indicator().iloc[-1]
            price = closes[-1]

            if ema_fast > ema_slow:
                msg = f"üìà EMA-–°–ò–ì–ù–ê–õ: –ü–û–ö–£–ü–ê–¢–¨ (fast={ema_fast:.2f}, slow={ema_slow:.2f})"
            elif ema_fast < ema_slow:
                msg = f"üìâ EMA-–°–ò–ì–ù–ê–õ: –ü–†–û–î–ê–í–ê–¢–¨ (fast={ema_fast:.2f}, slow={ema_slow:.2f})"
            else:
                msg = "‚ùï EMA –Ω–µ–π—Ç—Ä–∞–ª–µ–Ω."

            if VERBOSE_ADAPTIVE:
                signals_logger.info(f"ADAPTIVE_STRATEGY | {msg}")
            last_adaptive_signal = msg
            last_signal_time = now
            return msg
        except Exception as e:
            logging.error(f"ADAPTIVE_STRATEGY_ERROR (EMA): {e}")

    last_adaptive_signal = "‚ùï –ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)"
    last_signal_time = now
    return last_adaptive_signal
